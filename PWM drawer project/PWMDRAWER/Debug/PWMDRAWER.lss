
PWMDRAWER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f8a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00001f8a  00001ffe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000138c  00000000  00000000  00002014  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b89  00000000  00000000  000033a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00003f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00004089  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00004218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000625d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000735e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000082e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00008460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00008722  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008fb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__ctors_end>
       4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>

00000054 <font5x8>:
      54:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      64:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      74:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      84:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      94:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      a4:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      b4:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      c4:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      d4:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      e4:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
      f4:	32 49 79 41 3e 00                                   2IyA>.

000000fa <__ctors_end>:
      fa:	11 24       	eor	r1, r1
      fc:	1f be       	out	0x3f, r1	; 63
      fe:	cf e5       	ldi	r28, 0x5F	; 95
     100:	d8 e0       	ldi	r29, 0x08	; 8
     102:	de bf       	out	0x3e, r29	; 62
     104:	cd bf       	out	0x3d, r28	; 61

00000106 <__do_copy_data>:
     106:	10 e0       	ldi	r17, 0x00	; 0
     108:	a0 e6       	ldi	r26, 0x60	; 96
     10a:	b0 e0       	ldi	r27, 0x00	; 0
     10c:	ea e8       	ldi	r30, 0x8A	; 138
     10e:	ff e1       	ldi	r31, 0x1F	; 31
     110:	02 c0       	rjmp	.+4      	; 0x116 <.do_copy_data_start>

00000112 <.do_copy_data_loop>:
     112:	05 90       	lpm	r0, Z+
     114:	0d 92       	st	X+, r0

00000116 <.do_copy_data_start>:
     116:	a4 37       	cpi	r26, 0x74	; 116
     118:	b1 07       	cpc	r27, r17
     11a:	d9 f7       	brne	.-10     	; 0x112 <.do_copy_data_loop>
     11c:	0e 94 25 0b 	call	0x164a	; 0x164a <main>
     120:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <_exit>

00000124 <__bad_interrupt>:
     124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <__fixunssfsi>:
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
     130:	7b 01       	movw	r14, r22
     132:	8c 01       	movw	r16, r24
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	40 e0       	ldi	r20, 0x00	; 0
     13a:	5f e4       	ldi	r21, 0x4F	; 79
     13c:	0e 94 40 04 	call	0x880	; 0x880 <__gesf2>
     140:	88 23       	and	r24, r24
     142:	8c f0       	brlt	.+34     	; 0x166 <__fixunssfsi+0x3e>
     144:	c8 01       	movw	r24, r16
     146:	b7 01       	movw	r22, r14
     148:	20 e0       	ldi	r18, 0x00	; 0
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	40 e0       	ldi	r20, 0x00	; 0
     14e:	5f e4       	ldi	r21, 0x4F	; 79
     150:	0e 94 0c 02 	call	0x418	; 0x418 <__subsf3>
     154:	0e 94 a0 04 	call	0x940	; 0x940 <__fixsfsi>
     158:	9b 01       	movw	r18, r22
     15a:	ac 01       	movw	r20, r24
     15c:	20 50       	subi	r18, 0x00	; 0
     15e:	30 40       	sbci	r19, 0x00	; 0
     160:	40 40       	sbci	r20, 0x00	; 0
     162:	50 48       	sbci	r21, 0x80	; 128
     164:	06 c0       	rjmp	.+12     	; 0x172 <__fixunssfsi+0x4a>
     166:	c8 01       	movw	r24, r16
     168:	b7 01       	movw	r22, r14
     16a:	0e 94 a0 04 	call	0x940	; 0x940 <__fixsfsi>
     16e:	9b 01       	movw	r18, r22
     170:	ac 01       	movw	r20, r24
     172:	b9 01       	movw	r22, r18
     174:	ca 01       	movw	r24, r20
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	ff 90       	pop	r15
     17c:	ef 90       	pop	r14
     17e:	08 95       	ret

00000180 <_fpadd_parts>:
     180:	a0 e0       	ldi	r26, 0x00	; 0
     182:	b0 e0       	ldi	r27, 0x00	; 0
     184:	e6 ec       	ldi	r30, 0xC6	; 198
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__prologue_saves__>
     18c:	dc 01       	movw	r26, r24
     18e:	2b 01       	movw	r4, r22
     190:	fa 01       	movw	r30, r20
     192:	9c 91       	ld	r25, X
     194:	92 30       	cpi	r25, 0x02	; 2
     196:	08 f4       	brcc	.+2      	; 0x19a <_fpadd_parts+0x1a>
     198:	39 c1       	rjmp	.+626    	; 0x40c <_fpadd_parts+0x28c>
     19a:	eb 01       	movw	r28, r22
     19c:	88 81       	ld	r24, Y
     19e:	82 30       	cpi	r24, 0x02	; 2
     1a0:	08 f4       	brcc	.+2      	; 0x1a4 <_fpadd_parts+0x24>
     1a2:	33 c1       	rjmp	.+614    	; 0x40a <_fpadd_parts+0x28a>
     1a4:	94 30       	cpi	r25, 0x04	; 4
     1a6:	69 f4       	brne	.+26     	; 0x1c2 <_fpadd_parts+0x42>
     1a8:	84 30       	cpi	r24, 0x04	; 4
     1aa:	09 f0       	breq	.+2      	; 0x1ae <_fpadd_parts+0x2e>
     1ac:	2f c1       	rjmp	.+606    	; 0x40c <_fpadd_parts+0x28c>
     1ae:	11 96       	adiw	r26, 0x01	; 1
     1b0:	9c 91       	ld	r25, X
     1b2:	11 97       	sbiw	r26, 0x01	; 1
     1b4:	89 81       	ldd	r24, Y+1	; 0x01
     1b6:	98 17       	cp	r25, r24
     1b8:	09 f4       	brne	.+2      	; 0x1bc <_fpadd_parts+0x3c>
     1ba:	28 c1       	rjmp	.+592    	; 0x40c <_fpadd_parts+0x28c>
     1bc:	ab e6       	ldi	r26, 0x6B	; 107
     1be:	b0 e0       	ldi	r27, 0x00	; 0
     1c0:	25 c1       	rjmp	.+586    	; 0x40c <_fpadd_parts+0x28c>
     1c2:	84 30       	cpi	r24, 0x04	; 4
     1c4:	09 f4       	brne	.+2      	; 0x1c8 <_fpadd_parts+0x48>
     1c6:	21 c1       	rjmp	.+578    	; 0x40a <_fpadd_parts+0x28a>
     1c8:	82 30       	cpi	r24, 0x02	; 2
     1ca:	a9 f4       	brne	.+42     	; 0x1f6 <_fpadd_parts+0x76>
     1cc:	92 30       	cpi	r25, 0x02	; 2
     1ce:	09 f0       	breq	.+2      	; 0x1d2 <_fpadd_parts+0x52>
     1d0:	1d c1       	rjmp	.+570    	; 0x40c <_fpadd_parts+0x28c>
     1d2:	9a 01       	movw	r18, r20
     1d4:	ad 01       	movw	r20, r26
     1d6:	88 e0       	ldi	r24, 0x08	; 8
     1d8:	ea 01       	movw	r28, r20
     1da:	09 90       	ld	r0, Y+
     1dc:	ae 01       	movw	r20, r28
     1de:	e9 01       	movw	r28, r18
     1e0:	09 92       	st	Y+, r0
     1e2:	9e 01       	movw	r18, r28
     1e4:	81 50       	subi	r24, 0x01	; 1
     1e6:	c1 f7       	brne	.-16     	; 0x1d8 <_fpadd_parts+0x58>
     1e8:	e2 01       	movw	r28, r4
     1ea:	89 81       	ldd	r24, Y+1	; 0x01
     1ec:	11 96       	adiw	r26, 0x01	; 1
     1ee:	9c 91       	ld	r25, X
     1f0:	89 23       	and	r24, r25
     1f2:	81 83       	std	Z+1, r24	; 0x01
     1f4:	08 c1       	rjmp	.+528    	; 0x406 <_fpadd_parts+0x286>
     1f6:	92 30       	cpi	r25, 0x02	; 2
     1f8:	09 f4       	brne	.+2      	; 0x1fc <_fpadd_parts+0x7c>
     1fa:	07 c1       	rjmp	.+526    	; 0x40a <_fpadd_parts+0x28a>
     1fc:	12 96       	adiw	r26, 0x02	; 2
     1fe:	2d 90       	ld	r2, X+
     200:	3c 90       	ld	r3, X
     202:	13 97       	sbiw	r26, 0x03	; 3
     204:	eb 01       	movw	r28, r22
     206:	8a 81       	ldd	r24, Y+2	; 0x02
     208:	9b 81       	ldd	r25, Y+3	; 0x03
     20a:	14 96       	adiw	r26, 0x04	; 4
     20c:	ad 90       	ld	r10, X+
     20e:	bd 90       	ld	r11, X+
     210:	cd 90       	ld	r12, X+
     212:	dc 90       	ld	r13, X
     214:	17 97       	sbiw	r26, 0x07	; 7
     216:	ec 80       	ldd	r14, Y+4	; 0x04
     218:	fd 80       	ldd	r15, Y+5	; 0x05
     21a:	0e 81       	ldd	r16, Y+6	; 0x06
     21c:	1f 81       	ldd	r17, Y+7	; 0x07
     21e:	91 01       	movw	r18, r2
     220:	28 1b       	sub	r18, r24
     222:	39 0b       	sbc	r19, r25
     224:	b9 01       	movw	r22, r18
     226:	37 ff       	sbrs	r19, 7
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0xb2>
     22a:	66 27       	eor	r22, r22
     22c:	77 27       	eor	r23, r23
     22e:	62 1b       	sub	r22, r18
     230:	73 0b       	sbc	r23, r19
     232:	60 32       	cpi	r22, 0x20	; 32
     234:	71 05       	cpc	r23, r1
     236:	0c f0       	brlt	.+2      	; 0x23a <_fpadd_parts+0xba>
     238:	61 c0       	rjmp	.+194    	; 0x2fc <_fpadd_parts+0x17c>
     23a:	12 16       	cp	r1, r18
     23c:	13 06       	cpc	r1, r19
     23e:	6c f5       	brge	.+90     	; 0x29a <_fpadd_parts+0x11a>
     240:	37 01       	movw	r6, r14
     242:	48 01       	movw	r8, r16
     244:	06 2e       	mov	r0, r22
     246:	04 c0       	rjmp	.+8      	; 0x250 <_fpadd_parts+0xd0>
     248:	96 94       	lsr	r9
     24a:	87 94       	ror	r8
     24c:	77 94       	ror	r7
     24e:	67 94       	ror	r6
     250:	0a 94       	dec	r0
     252:	d2 f7       	brpl	.-12     	; 0x248 <_fpadd_parts+0xc8>
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	04 c0       	rjmp	.+8      	; 0x266 <_fpadd_parts+0xe6>
     25e:	22 0f       	add	r18, r18
     260:	33 1f       	adc	r19, r19
     262:	44 1f       	adc	r20, r20
     264:	55 1f       	adc	r21, r21
     266:	6a 95       	dec	r22
     268:	d2 f7       	brpl	.-12     	; 0x25e <_fpadd_parts+0xde>
     26a:	21 50       	subi	r18, 0x01	; 1
     26c:	30 40       	sbci	r19, 0x00	; 0
     26e:	40 40       	sbci	r20, 0x00	; 0
     270:	50 40       	sbci	r21, 0x00	; 0
     272:	2e 21       	and	r18, r14
     274:	3f 21       	and	r19, r15
     276:	40 23       	and	r20, r16
     278:	51 23       	and	r21, r17
     27a:	21 15       	cp	r18, r1
     27c:	31 05       	cpc	r19, r1
     27e:	41 05       	cpc	r20, r1
     280:	51 05       	cpc	r21, r1
     282:	21 f0       	breq	.+8      	; 0x28c <_fpadd_parts+0x10c>
     284:	21 e0       	ldi	r18, 0x01	; 1
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	79 01       	movw	r14, r18
     28e:	8a 01       	movw	r16, r20
     290:	e6 28       	or	r14, r6
     292:	f7 28       	or	r15, r7
     294:	08 29       	or	r16, r8
     296:	19 29       	or	r17, r9
     298:	3c c0       	rjmp	.+120    	; 0x312 <_fpadd_parts+0x192>
     29a:	23 2b       	or	r18, r19
     29c:	d1 f1       	breq	.+116    	; 0x312 <_fpadd_parts+0x192>
     29e:	26 0e       	add	r2, r22
     2a0:	37 1e       	adc	r3, r23
     2a2:	35 01       	movw	r6, r10
     2a4:	46 01       	movw	r8, r12
     2a6:	06 2e       	mov	r0, r22
     2a8:	04 c0       	rjmp	.+8      	; 0x2b2 <_fpadd_parts+0x132>
     2aa:	96 94       	lsr	r9
     2ac:	87 94       	ror	r8
     2ae:	77 94       	ror	r7
     2b0:	67 94       	ror	r6
     2b2:	0a 94       	dec	r0
     2b4:	d2 f7       	brpl	.-12     	; 0x2aa <_fpadd_parts+0x12a>
     2b6:	21 e0       	ldi	r18, 0x01	; 1
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	40 e0       	ldi	r20, 0x00	; 0
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	04 c0       	rjmp	.+8      	; 0x2c8 <_fpadd_parts+0x148>
     2c0:	22 0f       	add	r18, r18
     2c2:	33 1f       	adc	r19, r19
     2c4:	44 1f       	adc	r20, r20
     2c6:	55 1f       	adc	r21, r21
     2c8:	6a 95       	dec	r22
     2ca:	d2 f7       	brpl	.-12     	; 0x2c0 <_fpadd_parts+0x140>
     2cc:	21 50       	subi	r18, 0x01	; 1
     2ce:	30 40       	sbci	r19, 0x00	; 0
     2d0:	40 40       	sbci	r20, 0x00	; 0
     2d2:	50 40       	sbci	r21, 0x00	; 0
     2d4:	2a 21       	and	r18, r10
     2d6:	3b 21       	and	r19, r11
     2d8:	4c 21       	and	r20, r12
     2da:	5d 21       	and	r21, r13
     2dc:	21 15       	cp	r18, r1
     2de:	31 05       	cpc	r19, r1
     2e0:	41 05       	cpc	r20, r1
     2e2:	51 05       	cpc	r21, r1
     2e4:	21 f0       	breq	.+8      	; 0x2ee <_fpadd_parts+0x16e>
     2e6:	21 e0       	ldi	r18, 0x01	; 1
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	50 e0       	ldi	r21, 0x00	; 0
     2ee:	59 01       	movw	r10, r18
     2f0:	6a 01       	movw	r12, r20
     2f2:	a6 28       	or	r10, r6
     2f4:	b7 28       	or	r11, r7
     2f6:	c8 28       	or	r12, r8
     2f8:	d9 28       	or	r13, r9
     2fa:	0b c0       	rjmp	.+22     	; 0x312 <_fpadd_parts+0x192>
     2fc:	82 15       	cp	r24, r2
     2fe:	93 05       	cpc	r25, r3
     300:	2c f0       	brlt	.+10     	; 0x30c <_fpadd_parts+0x18c>
     302:	1c 01       	movw	r2, r24
     304:	aa 24       	eor	r10, r10
     306:	bb 24       	eor	r11, r11
     308:	65 01       	movw	r12, r10
     30a:	03 c0       	rjmp	.+6      	; 0x312 <_fpadd_parts+0x192>
     30c:	ee 24       	eor	r14, r14
     30e:	ff 24       	eor	r15, r15
     310:	87 01       	movw	r16, r14
     312:	11 96       	adiw	r26, 0x01	; 1
     314:	9c 91       	ld	r25, X
     316:	d2 01       	movw	r26, r4
     318:	11 96       	adiw	r26, 0x01	; 1
     31a:	8c 91       	ld	r24, X
     31c:	98 17       	cp	r25, r24
     31e:	09 f4       	brne	.+2      	; 0x322 <_fpadd_parts+0x1a2>
     320:	45 c0       	rjmp	.+138    	; 0x3ac <_fpadd_parts+0x22c>
     322:	99 23       	and	r25, r25
     324:	39 f0       	breq	.+14     	; 0x334 <_fpadd_parts+0x1b4>
     326:	a8 01       	movw	r20, r16
     328:	97 01       	movw	r18, r14
     32a:	2a 19       	sub	r18, r10
     32c:	3b 09       	sbc	r19, r11
     32e:	4c 09       	sbc	r20, r12
     330:	5d 09       	sbc	r21, r13
     332:	06 c0       	rjmp	.+12     	; 0x340 <_fpadd_parts+0x1c0>
     334:	a6 01       	movw	r20, r12
     336:	95 01       	movw	r18, r10
     338:	2e 19       	sub	r18, r14
     33a:	3f 09       	sbc	r19, r15
     33c:	40 0b       	sbc	r20, r16
     33e:	51 0b       	sbc	r21, r17
     340:	57 fd       	sbrc	r21, 7
     342:	08 c0       	rjmp	.+16     	; 0x354 <_fpadd_parts+0x1d4>
     344:	11 82       	std	Z+1, r1	; 0x01
     346:	33 82       	std	Z+3, r3	; 0x03
     348:	22 82       	std	Z+2, r2	; 0x02
     34a:	24 83       	std	Z+4, r18	; 0x04
     34c:	35 83       	std	Z+5, r19	; 0x05
     34e:	46 83       	std	Z+6, r20	; 0x06
     350:	57 83       	std	Z+7, r21	; 0x07
     352:	1d c0       	rjmp	.+58     	; 0x38e <_fpadd_parts+0x20e>
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	81 83       	std	Z+1, r24	; 0x01
     358:	33 82       	std	Z+3, r3	; 0x03
     35a:	22 82       	std	Z+2, r2	; 0x02
     35c:	88 27       	eor	r24, r24
     35e:	99 27       	eor	r25, r25
     360:	dc 01       	movw	r26, r24
     362:	82 1b       	sub	r24, r18
     364:	93 0b       	sbc	r25, r19
     366:	a4 0b       	sbc	r26, r20
     368:	b5 0b       	sbc	r27, r21
     36a:	84 83       	std	Z+4, r24	; 0x04
     36c:	95 83       	std	Z+5, r25	; 0x05
     36e:	a6 83       	std	Z+6, r26	; 0x06
     370:	b7 83       	std	Z+7, r27	; 0x07
     372:	0d c0       	rjmp	.+26     	; 0x38e <_fpadd_parts+0x20e>
     374:	22 0f       	add	r18, r18
     376:	33 1f       	adc	r19, r19
     378:	44 1f       	adc	r20, r20
     37a:	55 1f       	adc	r21, r21
     37c:	24 83       	std	Z+4, r18	; 0x04
     37e:	35 83       	std	Z+5, r19	; 0x05
     380:	46 83       	std	Z+6, r20	; 0x06
     382:	57 83       	std	Z+7, r21	; 0x07
     384:	82 81       	ldd	r24, Z+2	; 0x02
     386:	93 81       	ldd	r25, Z+3	; 0x03
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	93 83       	std	Z+3, r25	; 0x03
     38c:	82 83       	std	Z+2, r24	; 0x02
     38e:	24 81       	ldd	r18, Z+4	; 0x04
     390:	35 81       	ldd	r19, Z+5	; 0x05
     392:	46 81       	ldd	r20, Z+6	; 0x06
     394:	57 81       	ldd	r21, Z+7	; 0x07
     396:	da 01       	movw	r26, r20
     398:	c9 01       	movw	r24, r18
     39a:	01 97       	sbiw	r24, 0x01	; 1
     39c:	a1 09       	sbc	r26, r1
     39e:	b1 09       	sbc	r27, r1
     3a0:	8f 5f       	subi	r24, 0xFF	; 255
     3a2:	9f 4f       	sbci	r25, 0xFF	; 255
     3a4:	af 4f       	sbci	r26, 0xFF	; 255
     3a6:	bf 43       	sbci	r27, 0x3F	; 63
     3a8:	28 f3       	brcs	.-54     	; 0x374 <_fpadd_parts+0x1f4>
     3aa:	0b c0       	rjmp	.+22     	; 0x3c2 <_fpadd_parts+0x242>
     3ac:	91 83       	std	Z+1, r25	; 0x01
     3ae:	33 82       	std	Z+3, r3	; 0x03
     3b0:	22 82       	std	Z+2, r2	; 0x02
     3b2:	ea 0c       	add	r14, r10
     3b4:	fb 1c       	adc	r15, r11
     3b6:	0c 1d       	adc	r16, r12
     3b8:	1d 1d       	adc	r17, r13
     3ba:	e4 82       	std	Z+4, r14	; 0x04
     3bc:	f5 82       	std	Z+5, r15	; 0x05
     3be:	06 83       	std	Z+6, r16	; 0x06
     3c0:	17 83       	std	Z+7, r17	; 0x07
     3c2:	83 e0       	ldi	r24, 0x03	; 3
     3c4:	80 83       	st	Z, r24
     3c6:	24 81       	ldd	r18, Z+4	; 0x04
     3c8:	35 81       	ldd	r19, Z+5	; 0x05
     3ca:	46 81       	ldd	r20, Z+6	; 0x06
     3cc:	57 81       	ldd	r21, Z+7	; 0x07
     3ce:	57 ff       	sbrs	r21, 7
     3d0:	1a c0       	rjmp	.+52     	; 0x406 <_fpadd_parts+0x286>
     3d2:	c9 01       	movw	r24, r18
     3d4:	aa 27       	eor	r26, r26
     3d6:	97 fd       	sbrc	r25, 7
     3d8:	a0 95       	com	r26
     3da:	ba 2f       	mov	r27, r26
     3dc:	81 70       	andi	r24, 0x01	; 1
     3de:	90 70       	andi	r25, 0x00	; 0
     3e0:	a0 70       	andi	r26, 0x00	; 0
     3e2:	b0 70       	andi	r27, 0x00	; 0
     3e4:	56 95       	lsr	r21
     3e6:	47 95       	ror	r20
     3e8:	37 95       	ror	r19
     3ea:	27 95       	ror	r18
     3ec:	82 2b       	or	r24, r18
     3ee:	93 2b       	or	r25, r19
     3f0:	a4 2b       	or	r26, r20
     3f2:	b5 2b       	or	r27, r21
     3f4:	84 83       	std	Z+4, r24	; 0x04
     3f6:	95 83       	std	Z+5, r25	; 0x05
     3f8:	a6 83       	std	Z+6, r26	; 0x06
     3fa:	b7 83       	std	Z+7, r27	; 0x07
     3fc:	82 81       	ldd	r24, Z+2	; 0x02
     3fe:	93 81       	ldd	r25, Z+3	; 0x03
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	93 83       	std	Z+3, r25	; 0x03
     404:	82 83       	std	Z+2, r24	; 0x02
     406:	df 01       	movw	r26, r30
     408:	01 c0       	rjmp	.+2      	; 0x40c <_fpadd_parts+0x28c>
     40a:	d2 01       	movw	r26, r4
     40c:	cd 01       	movw	r24, r26
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	e2 e1       	ldi	r30, 0x12	; 18
     414:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__epilogue_restores__>

00000418 <__subsf3>:
     418:	a0 e2       	ldi	r26, 0x20	; 32
     41a:	b0 e0       	ldi	r27, 0x00	; 0
     41c:	e2 e1       	ldi	r30, 0x12	; 18
     41e:	f2 e0       	ldi	r31, 0x02	; 2
     420:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__prologue_saves__+0x18>
     424:	69 83       	std	Y+1, r22	; 0x01
     426:	7a 83       	std	Y+2, r23	; 0x02
     428:	8b 83       	std	Y+3, r24	; 0x03
     42a:	9c 83       	std	Y+4, r25	; 0x04
     42c:	2d 83       	std	Y+5, r18	; 0x05
     42e:	3e 83       	std	Y+6, r19	; 0x06
     430:	4f 83       	std	Y+7, r20	; 0x07
     432:	58 87       	std	Y+8, r21	; 0x08
     434:	e9 e0       	ldi	r30, 0x09	; 9
     436:	ee 2e       	mov	r14, r30
     438:	f1 2c       	mov	r15, r1
     43a:	ec 0e       	add	r14, r28
     43c:	fd 1e       	adc	r15, r29
     43e:	ce 01       	movw	r24, r28
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	b7 01       	movw	r22, r14
     444:	0e 94 c9 05 	call	0xb92	; 0xb92 <__unpack_f>
     448:	8e 01       	movw	r16, r28
     44a:	0f 5e       	subi	r16, 0xEF	; 239
     44c:	1f 4f       	sbci	r17, 0xFF	; 255
     44e:	ce 01       	movw	r24, r28
     450:	05 96       	adiw	r24, 0x05	; 5
     452:	b8 01       	movw	r22, r16
     454:	0e 94 c9 05 	call	0xb92	; 0xb92 <__unpack_f>
     458:	8a 89       	ldd	r24, Y+18	; 0x12
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	89 27       	eor	r24, r25
     45e:	8a 8b       	std	Y+18, r24	; 0x12
     460:	c7 01       	movw	r24, r14
     462:	b8 01       	movw	r22, r16
     464:	ae 01       	movw	r20, r28
     466:	47 5e       	subi	r20, 0xE7	; 231
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	0e 94 c0 00 	call	0x180	; 0x180 <_fpadd_parts>
     46e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__pack_f>
     472:	a0 96       	adiw	r28, 0x20	; 32
     474:	e6 e0       	ldi	r30, 0x06	; 6
     476:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__epilogue_restores__+0x18>

0000047a <__addsf3>:
     47a:	a0 e2       	ldi	r26, 0x20	; 32
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e3 e4       	ldi	r30, 0x43	; 67
     480:	f2 e0       	ldi	r31, 0x02	; 2
     482:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__prologue_saves__+0x18>
     486:	69 83       	std	Y+1, r22	; 0x01
     488:	7a 83       	std	Y+2, r23	; 0x02
     48a:	8b 83       	std	Y+3, r24	; 0x03
     48c:	9c 83       	std	Y+4, r25	; 0x04
     48e:	2d 83       	std	Y+5, r18	; 0x05
     490:	3e 83       	std	Y+6, r19	; 0x06
     492:	4f 83       	std	Y+7, r20	; 0x07
     494:	58 87       	std	Y+8, r21	; 0x08
     496:	f9 e0       	ldi	r31, 0x09	; 9
     498:	ef 2e       	mov	r14, r31
     49a:	f1 2c       	mov	r15, r1
     49c:	ec 0e       	add	r14, r28
     49e:	fd 1e       	adc	r15, r29
     4a0:	ce 01       	movw	r24, r28
     4a2:	01 96       	adiw	r24, 0x01	; 1
     4a4:	b7 01       	movw	r22, r14
     4a6:	0e 94 c9 05 	call	0xb92	; 0xb92 <__unpack_f>
     4aa:	8e 01       	movw	r16, r28
     4ac:	0f 5e       	subi	r16, 0xEF	; 239
     4ae:	1f 4f       	sbci	r17, 0xFF	; 255
     4b0:	ce 01       	movw	r24, r28
     4b2:	05 96       	adiw	r24, 0x05	; 5
     4b4:	b8 01       	movw	r22, r16
     4b6:	0e 94 c9 05 	call	0xb92	; 0xb92 <__unpack_f>
     4ba:	c7 01       	movw	r24, r14
     4bc:	b8 01       	movw	r22, r16
     4be:	ae 01       	movw	r20, r28
     4c0:	47 5e       	subi	r20, 0xE7	; 231
     4c2:	5f 4f       	sbci	r21, 0xFF	; 255
     4c4:	0e 94 c0 00 	call	0x180	; 0x180 <_fpadd_parts>
     4c8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__pack_f>
     4cc:	a0 96       	adiw	r28, 0x20	; 32
     4ce:	e6 e0       	ldi	r30, 0x06	; 6
     4d0:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__epilogue_restores__+0x18>

000004d4 <__mulsf3>:
     4d4:	a0 e2       	ldi	r26, 0x20	; 32
     4d6:	b0 e0       	ldi	r27, 0x00	; 0
     4d8:	e0 e7       	ldi	r30, 0x70	; 112
     4da:	f2 e0       	ldi	r31, 0x02	; 2
     4dc:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__prologue_saves__>
     4e0:	69 83       	std	Y+1, r22	; 0x01
     4e2:	7a 83       	std	Y+2, r23	; 0x02
     4e4:	8b 83       	std	Y+3, r24	; 0x03
     4e6:	9c 83       	std	Y+4, r25	; 0x04
     4e8:	2d 83       	std	Y+5, r18	; 0x05
     4ea:	3e 83       	std	Y+6, r19	; 0x06
     4ec:	4f 83       	std	Y+7, r20	; 0x07
     4ee:	58 87       	std	Y+8, r21	; 0x08
     4f0:	ce 01       	movw	r24, r28
     4f2:	01 96       	adiw	r24, 0x01	; 1
     4f4:	be 01       	movw	r22, r28
     4f6:	67 5f       	subi	r22, 0xF7	; 247
     4f8:	7f 4f       	sbci	r23, 0xFF	; 255
     4fa:	0e 94 c9 05 	call	0xb92	; 0xb92 <__unpack_f>
     4fe:	ce 01       	movw	r24, r28
     500:	05 96       	adiw	r24, 0x05	; 5
     502:	be 01       	movw	r22, r28
     504:	6f 5e       	subi	r22, 0xEF	; 239
     506:	7f 4f       	sbci	r23, 0xFF	; 255
     508:	0e 94 c9 05 	call	0xb92	; 0xb92 <__unpack_f>
     50c:	99 85       	ldd	r25, Y+9	; 0x09
     50e:	92 30       	cpi	r25, 0x02	; 2
     510:	88 f0       	brcs	.+34     	; 0x534 <__mulsf3+0x60>
     512:	89 89       	ldd	r24, Y+17	; 0x11
     514:	82 30       	cpi	r24, 0x02	; 2
     516:	c8 f0       	brcs	.+50     	; 0x54a <__mulsf3+0x76>
     518:	94 30       	cpi	r25, 0x04	; 4
     51a:	19 f4       	brne	.+6      	; 0x522 <__mulsf3+0x4e>
     51c:	82 30       	cpi	r24, 0x02	; 2
     51e:	51 f4       	brne	.+20     	; 0x534 <__mulsf3+0x60>
     520:	04 c0       	rjmp	.+8      	; 0x52a <__mulsf3+0x56>
     522:	84 30       	cpi	r24, 0x04	; 4
     524:	29 f4       	brne	.+10     	; 0x530 <__mulsf3+0x5c>
     526:	92 30       	cpi	r25, 0x02	; 2
     528:	81 f4       	brne	.+32     	; 0x54a <__mulsf3+0x76>
     52a:	8b e6       	ldi	r24, 0x6B	; 107
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	c6 c0       	rjmp	.+396    	; 0x6bc <__mulsf3+0x1e8>
     530:	92 30       	cpi	r25, 0x02	; 2
     532:	49 f4       	brne	.+18     	; 0x546 <__mulsf3+0x72>
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	9a 85       	ldd	r25, Y+10	; 0x0a
     538:	8a 89       	ldd	r24, Y+18	; 0x12
     53a:	98 13       	cpse	r25, r24
     53c:	21 e0       	ldi	r18, 0x01	; 1
     53e:	2a 87       	std	Y+10, r18	; 0x0a
     540:	ce 01       	movw	r24, r28
     542:	09 96       	adiw	r24, 0x09	; 9
     544:	bb c0       	rjmp	.+374    	; 0x6bc <__mulsf3+0x1e8>
     546:	82 30       	cpi	r24, 0x02	; 2
     548:	49 f4       	brne	.+18     	; 0x55c <__mulsf3+0x88>
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	9a 85       	ldd	r25, Y+10	; 0x0a
     54e:	8a 89       	ldd	r24, Y+18	; 0x12
     550:	98 13       	cpse	r25, r24
     552:	21 e0       	ldi	r18, 0x01	; 1
     554:	2a 8b       	std	Y+18, r18	; 0x12
     556:	ce 01       	movw	r24, r28
     558:	41 96       	adiw	r24, 0x11	; 17
     55a:	b0 c0       	rjmp	.+352    	; 0x6bc <__mulsf3+0x1e8>
     55c:	2d 84       	ldd	r2, Y+13	; 0x0d
     55e:	3e 84       	ldd	r3, Y+14	; 0x0e
     560:	4f 84       	ldd	r4, Y+15	; 0x0f
     562:	58 88       	ldd	r5, Y+16	; 0x10
     564:	6d 88       	ldd	r6, Y+21	; 0x15
     566:	7e 88       	ldd	r7, Y+22	; 0x16
     568:	8f 88       	ldd	r8, Y+23	; 0x17
     56a:	98 8c       	ldd	r9, Y+24	; 0x18
     56c:	ee 24       	eor	r14, r14
     56e:	ff 24       	eor	r15, r15
     570:	87 01       	movw	r16, r14
     572:	aa 24       	eor	r10, r10
     574:	bb 24       	eor	r11, r11
     576:	65 01       	movw	r12, r10
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	e0 e0       	ldi	r30, 0x00	; 0
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	c1 01       	movw	r24, r2
     586:	81 70       	andi	r24, 0x01	; 1
     588:	90 70       	andi	r25, 0x00	; 0
     58a:	89 2b       	or	r24, r25
     58c:	e9 f0       	breq	.+58     	; 0x5c8 <__mulsf3+0xf4>
     58e:	e6 0c       	add	r14, r6
     590:	f7 1c       	adc	r15, r7
     592:	08 1d       	adc	r16, r8
     594:	19 1d       	adc	r17, r9
     596:	9a 01       	movw	r18, r20
     598:	ab 01       	movw	r20, r22
     59a:	2a 0d       	add	r18, r10
     59c:	3b 1d       	adc	r19, r11
     59e:	4c 1d       	adc	r20, r12
     5a0:	5d 1d       	adc	r21, r13
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	a0 e0       	ldi	r26, 0x00	; 0
     5a8:	b0 e0       	ldi	r27, 0x00	; 0
     5aa:	e6 14       	cp	r14, r6
     5ac:	f7 04       	cpc	r15, r7
     5ae:	08 05       	cpc	r16, r8
     5b0:	19 05       	cpc	r17, r9
     5b2:	20 f4       	brcc	.+8      	; 0x5bc <__mulsf3+0xe8>
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	a0 e0       	ldi	r26, 0x00	; 0
     5ba:	b0 e0       	ldi	r27, 0x00	; 0
     5bc:	ba 01       	movw	r22, r20
     5be:	a9 01       	movw	r20, r18
     5c0:	48 0f       	add	r20, r24
     5c2:	59 1f       	adc	r21, r25
     5c4:	6a 1f       	adc	r22, r26
     5c6:	7b 1f       	adc	r23, r27
     5c8:	aa 0c       	add	r10, r10
     5ca:	bb 1c       	adc	r11, r11
     5cc:	cc 1c       	adc	r12, r12
     5ce:	dd 1c       	adc	r13, r13
     5d0:	97 fe       	sbrs	r9, 7
     5d2:	08 c0       	rjmp	.+16     	; 0x5e4 <__mulsf3+0x110>
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	a0 e0       	ldi	r26, 0x00	; 0
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	a8 2a       	or	r10, r24
     5de:	b9 2a       	or	r11, r25
     5e0:	ca 2a       	or	r12, r26
     5e2:	db 2a       	or	r13, r27
     5e4:	31 96       	adiw	r30, 0x01	; 1
     5e6:	e0 32       	cpi	r30, 0x20	; 32
     5e8:	f1 05       	cpc	r31, r1
     5ea:	49 f0       	breq	.+18     	; 0x5fe <__mulsf3+0x12a>
     5ec:	66 0c       	add	r6, r6
     5ee:	77 1c       	adc	r7, r7
     5f0:	88 1c       	adc	r8, r8
     5f2:	99 1c       	adc	r9, r9
     5f4:	56 94       	lsr	r5
     5f6:	47 94       	ror	r4
     5f8:	37 94       	ror	r3
     5fa:	27 94       	ror	r2
     5fc:	c3 cf       	rjmp	.-122    	; 0x584 <__mulsf3+0xb0>
     5fe:	fa 85       	ldd	r31, Y+10	; 0x0a
     600:	ea 89       	ldd	r30, Y+18	; 0x12
     602:	2b 89       	ldd	r18, Y+19	; 0x13
     604:	3c 89       	ldd	r19, Y+20	; 0x14
     606:	8b 85       	ldd	r24, Y+11	; 0x0b
     608:	9c 85       	ldd	r25, Y+12	; 0x0c
     60a:	28 0f       	add	r18, r24
     60c:	39 1f       	adc	r19, r25
     60e:	2e 5f       	subi	r18, 0xFE	; 254
     610:	3f 4f       	sbci	r19, 0xFF	; 255
     612:	17 c0       	rjmp	.+46     	; 0x642 <__mulsf3+0x16e>
     614:	ca 01       	movw	r24, r20
     616:	81 70       	andi	r24, 0x01	; 1
     618:	90 70       	andi	r25, 0x00	; 0
     61a:	89 2b       	or	r24, r25
     61c:	61 f0       	breq	.+24     	; 0x636 <__mulsf3+0x162>
     61e:	16 95       	lsr	r17
     620:	07 95       	ror	r16
     622:	f7 94       	ror	r15
     624:	e7 94       	ror	r14
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	a0 e0       	ldi	r26, 0x00	; 0
     62c:	b0 e8       	ldi	r27, 0x80	; 128
     62e:	e8 2a       	or	r14, r24
     630:	f9 2a       	or	r15, r25
     632:	0a 2b       	or	r16, r26
     634:	1b 2b       	or	r17, r27
     636:	76 95       	lsr	r23
     638:	67 95       	ror	r22
     63a:	57 95       	ror	r21
     63c:	47 95       	ror	r20
     63e:	2f 5f       	subi	r18, 0xFF	; 255
     640:	3f 4f       	sbci	r19, 0xFF	; 255
     642:	77 fd       	sbrc	r23, 7
     644:	e7 cf       	rjmp	.-50     	; 0x614 <__mulsf3+0x140>
     646:	0c c0       	rjmp	.+24     	; 0x660 <__mulsf3+0x18c>
     648:	44 0f       	add	r20, r20
     64a:	55 1f       	adc	r21, r21
     64c:	66 1f       	adc	r22, r22
     64e:	77 1f       	adc	r23, r23
     650:	17 fd       	sbrc	r17, 7
     652:	41 60       	ori	r20, 0x01	; 1
     654:	ee 0c       	add	r14, r14
     656:	ff 1c       	adc	r15, r15
     658:	00 1f       	adc	r16, r16
     65a:	11 1f       	adc	r17, r17
     65c:	21 50       	subi	r18, 0x01	; 1
     65e:	30 40       	sbci	r19, 0x00	; 0
     660:	40 30       	cpi	r20, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	59 07       	cpc	r21, r25
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	69 07       	cpc	r22, r25
     66a:	90 e4       	ldi	r25, 0x40	; 64
     66c:	79 07       	cpc	r23, r25
     66e:	60 f3       	brcs	.-40     	; 0x648 <__mulsf3+0x174>
     670:	2b 8f       	std	Y+27, r18	; 0x1b
     672:	3c 8f       	std	Y+28, r19	; 0x1c
     674:	db 01       	movw	r26, r22
     676:	ca 01       	movw	r24, r20
     678:	8f 77       	andi	r24, 0x7F	; 127
     67a:	90 70       	andi	r25, 0x00	; 0
     67c:	a0 70       	andi	r26, 0x00	; 0
     67e:	b0 70       	andi	r27, 0x00	; 0
     680:	80 34       	cpi	r24, 0x40	; 64
     682:	91 05       	cpc	r25, r1
     684:	a1 05       	cpc	r26, r1
     686:	b1 05       	cpc	r27, r1
     688:	61 f4       	brne	.+24     	; 0x6a2 <__mulsf3+0x1ce>
     68a:	47 fd       	sbrc	r20, 7
     68c:	0a c0       	rjmp	.+20     	; 0x6a2 <__mulsf3+0x1ce>
     68e:	e1 14       	cp	r14, r1
     690:	f1 04       	cpc	r15, r1
     692:	01 05       	cpc	r16, r1
     694:	11 05       	cpc	r17, r1
     696:	29 f0       	breq	.+10     	; 0x6a2 <__mulsf3+0x1ce>
     698:	40 5c       	subi	r20, 0xC0	; 192
     69a:	5f 4f       	sbci	r21, 0xFF	; 255
     69c:	6f 4f       	sbci	r22, 0xFF	; 255
     69e:	7f 4f       	sbci	r23, 0xFF	; 255
     6a0:	40 78       	andi	r20, 0x80	; 128
     6a2:	1a 8e       	std	Y+26, r1	; 0x1a
     6a4:	fe 17       	cp	r31, r30
     6a6:	11 f0       	breq	.+4      	; 0x6ac <__mulsf3+0x1d8>
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	8a 8f       	std	Y+26, r24	; 0x1a
     6ac:	4d 8f       	std	Y+29, r20	; 0x1d
     6ae:	5e 8f       	std	Y+30, r21	; 0x1e
     6b0:	6f 8f       	std	Y+31, r22	; 0x1f
     6b2:	78 a3       	std	Y+32, r23	; 0x20
     6b4:	83 e0       	ldi	r24, 0x03	; 3
     6b6:	89 8f       	std	Y+25, r24	; 0x19
     6b8:	ce 01       	movw	r24, r28
     6ba:	49 96       	adiw	r24, 0x19	; 25
     6bc:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__pack_f>
     6c0:	a0 96       	adiw	r28, 0x20	; 32
     6c2:	e2 e1       	ldi	r30, 0x12	; 18
     6c4:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__epilogue_restores__>

000006c8 <__divsf3>:
     6c8:	a8 e1       	ldi	r26, 0x18	; 24
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
     6cc:	ea e6       	ldi	r30, 0x6A	; 106
     6ce:	f3 e0       	ldi	r31, 0x03	; 3
     6d0:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__prologue_saves__+0x10>
     6d4:	69 83       	std	Y+1, r22	; 0x01
     6d6:	7a 83       	std	Y+2, r23	; 0x02
     6d8:	8b 83       	std	Y+3, r24	; 0x03
     6da:	9c 83       	std	Y+4, r25	; 0x04
     6dc:	2d 83       	std	Y+5, r18	; 0x05
     6de:	3e 83       	std	Y+6, r19	; 0x06
     6e0:	4f 83       	std	Y+7, r20	; 0x07
     6e2:	58 87       	std	Y+8, r21	; 0x08
     6e4:	b9 e0       	ldi	r27, 0x09	; 9
     6e6:	eb 2e       	mov	r14, r27
     6e8:	f1 2c       	mov	r15, r1
     6ea:	ec 0e       	add	r14, r28
     6ec:	fd 1e       	adc	r15, r29
     6ee:	ce 01       	movw	r24, r28
     6f0:	01 96       	adiw	r24, 0x01	; 1
     6f2:	b7 01       	movw	r22, r14
     6f4:	0e 94 c9 05 	call	0xb92	; 0xb92 <__unpack_f>
     6f8:	8e 01       	movw	r16, r28
     6fa:	0f 5e       	subi	r16, 0xEF	; 239
     6fc:	1f 4f       	sbci	r17, 0xFF	; 255
     6fe:	ce 01       	movw	r24, r28
     700:	05 96       	adiw	r24, 0x05	; 5
     702:	b8 01       	movw	r22, r16
     704:	0e 94 c9 05 	call	0xb92	; 0xb92 <__unpack_f>
     708:	29 85       	ldd	r18, Y+9	; 0x09
     70a:	22 30       	cpi	r18, 0x02	; 2
     70c:	08 f4       	brcc	.+2      	; 0x710 <__divsf3+0x48>
     70e:	7e c0       	rjmp	.+252    	; 0x80c <__divsf3+0x144>
     710:	39 89       	ldd	r19, Y+17	; 0x11
     712:	32 30       	cpi	r19, 0x02	; 2
     714:	10 f4       	brcc	.+4      	; 0x71a <__divsf3+0x52>
     716:	b8 01       	movw	r22, r16
     718:	7c c0       	rjmp	.+248    	; 0x812 <__divsf3+0x14a>
     71a:	8a 85       	ldd	r24, Y+10	; 0x0a
     71c:	9a 89       	ldd	r25, Y+18	; 0x12
     71e:	89 27       	eor	r24, r25
     720:	8a 87       	std	Y+10, r24	; 0x0a
     722:	24 30       	cpi	r18, 0x04	; 4
     724:	11 f0       	breq	.+4      	; 0x72a <__divsf3+0x62>
     726:	22 30       	cpi	r18, 0x02	; 2
     728:	31 f4       	brne	.+12     	; 0x736 <__divsf3+0x6e>
     72a:	23 17       	cp	r18, r19
     72c:	09 f0       	breq	.+2      	; 0x730 <__divsf3+0x68>
     72e:	6e c0       	rjmp	.+220    	; 0x80c <__divsf3+0x144>
     730:	6b e6       	ldi	r22, 0x6B	; 107
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	6e c0       	rjmp	.+220    	; 0x812 <__divsf3+0x14a>
     736:	34 30       	cpi	r19, 0x04	; 4
     738:	39 f4       	brne	.+14     	; 0x748 <__divsf3+0x80>
     73a:	1d 86       	std	Y+13, r1	; 0x0d
     73c:	1e 86       	std	Y+14, r1	; 0x0e
     73e:	1f 86       	std	Y+15, r1	; 0x0f
     740:	18 8a       	std	Y+16, r1	; 0x10
     742:	1c 86       	std	Y+12, r1	; 0x0c
     744:	1b 86       	std	Y+11, r1	; 0x0b
     746:	04 c0       	rjmp	.+8      	; 0x750 <__divsf3+0x88>
     748:	32 30       	cpi	r19, 0x02	; 2
     74a:	21 f4       	brne	.+8      	; 0x754 <__divsf3+0x8c>
     74c:	84 e0       	ldi	r24, 0x04	; 4
     74e:	89 87       	std	Y+9, r24	; 0x09
     750:	b7 01       	movw	r22, r14
     752:	5f c0       	rjmp	.+190    	; 0x812 <__divsf3+0x14a>
     754:	2b 85       	ldd	r18, Y+11	; 0x0b
     756:	3c 85       	ldd	r19, Y+12	; 0x0c
     758:	8b 89       	ldd	r24, Y+19	; 0x13
     75a:	9c 89       	ldd	r25, Y+20	; 0x14
     75c:	28 1b       	sub	r18, r24
     75e:	39 0b       	sbc	r19, r25
     760:	3c 87       	std	Y+12, r19	; 0x0c
     762:	2b 87       	std	Y+11, r18	; 0x0b
     764:	ed 84       	ldd	r14, Y+13	; 0x0d
     766:	fe 84       	ldd	r15, Y+14	; 0x0e
     768:	0f 85       	ldd	r16, Y+15	; 0x0f
     76a:	18 89       	ldd	r17, Y+16	; 0x10
     76c:	ad 88       	ldd	r10, Y+21	; 0x15
     76e:	be 88       	ldd	r11, Y+22	; 0x16
     770:	cf 88       	ldd	r12, Y+23	; 0x17
     772:	d8 8c       	ldd	r13, Y+24	; 0x18
     774:	ea 14       	cp	r14, r10
     776:	fb 04       	cpc	r15, r11
     778:	0c 05       	cpc	r16, r12
     77a:	1d 05       	cpc	r17, r13
     77c:	40 f4       	brcc	.+16     	; 0x78e <__divsf3+0xc6>
     77e:	ee 0c       	add	r14, r14
     780:	ff 1c       	adc	r15, r15
     782:	00 1f       	adc	r16, r16
     784:	11 1f       	adc	r17, r17
     786:	21 50       	subi	r18, 0x01	; 1
     788:	30 40       	sbci	r19, 0x00	; 0
     78a:	3c 87       	std	Y+12, r19	; 0x0c
     78c:	2b 87       	std	Y+11, r18	; 0x0b
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	a0 e0       	ldi	r26, 0x00	; 0
     79c:	b0 e4       	ldi	r27, 0x40	; 64
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	ea 14       	cp	r14, r10
     7a4:	fb 04       	cpc	r15, r11
     7a6:	0c 05       	cpc	r16, r12
     7a8:	1d 05       	cpc	r17, r13
     7aa:	40 f0       	brcs	.+16     	; 0x7bc <__divsf3+0xf4>
     7ac:	28 2b       	or	r18, r24
     7ae:	39 2b       	or	r19, r25
     7b0:	4a 2b       	or	r20, r26
     7b2:	5b 2b       	or	r21, r27
     7b4:	ea 18       	sub	r14, r10
     7b6:	fb 08       	sbc	r15, r11
     7b8:	0c 09       	sbc	r16, r12
     7ba:	1d 09       	sbc	r17, r13
     7bc:	b6 95       	lsr	r27
     7be:	a7 95       	ror	r26
     7c0:	97 95       	ror	r25
     7c2:	87 95       	ror	r24
     7c4:	ee 0c       	add	r14, r14
     7c6:	ff 1c       	adc	r15, r15
     7c8:	00 1f       	adc	r16, r16
     7ca:	11 1f       	adc	r17, r17
     7cc:	6f 5f       	subi	r22, 0xFF	; 255
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	6f 31       	cpi	r22, 0x1F	; 31
     7d2:	71 05       	cpc	r23, r1
     7d4:	31 f7       	brne	.-52     	; 0x7a2 <__divsf3+0xda>
     7d6:	da 01       	movw	r26, r20
     7d8:	c9 01       	movw	r24, r18
     7da:	8f 77       	andi	r24, 0x7F	; 127
     7dc:	90 70       	andi	r25, 0x00	; 0
     7de:	a0 70       	andi	r26, 0x00	; 0
     7e0:	b0 70       	andi	r27, 0x00	; 0
     7e2:	80 34       	cpi	r24, 0x40	; 64
     7e4:	91 05       	cpc	r25, r1
     7e6:	a1 05       	cpc	r26, r1
     7e8:	b1 05       	cpc	r27, r1
     7ea:	61 f4       	brne	.+24     	; 0x804 <__divsf3+0x13c>
     7ec:	27 fd       	sbrc	r18, 7
     7ee:	0a c0       	rjmp	.+20     	; 0x804 <__divsf3+0x13c>
     7f0:	e1 14       	cp	r14, r1
     7f2:	f1 04       	cpc	r15, r1
     7f4:	01 05       	cpc	r16, r1
     7f6:	11 05       	cpc	r17, r1
     7f8:	29 f0       	breq	.+10     	; 0x804 <__divsf3+0x13c>
     7fa:	20 5c       	subi	r18, 0xC0	; 192
     7fc:	3f 4f       	sbci	r19, 0xFF	; 255
     7fe:	4f 4f       	sbci	r20, 0xFF	; 255
     800:	5f 4f       	sbci	r21, 0xFF	; 255
     802:	20 78       	andi	r18, 0x80	; 128
     804:	2d 87       	std	Y+13, r18	; 0x0d
     806:	3e 87       	std	Y+14, r19	; 0x0e
     808:	4f 87       	std	Y+15, r20	; 0x0f
     80a:	58 8b       	std	Y+16, r21	; 0x10
     80c:	be 01       	movw	r22, r28
     80e:	67 5f       	subi	r22, 0xF7	; 247
     810:	7f 4f       	sbci	r23, 0xFF	; 255
     812:	cb 01       	movw	r24, r22
     814:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__pack_f>
     818:	68 96       	adiw	r28, 0x18	; 24
     81a:	ea e0       	ldi	r30, 0x0A	; 10
     81c:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__epilogue_restores__+0x10>

00000820 <__gtsf2>:
     820:	a8 e1       	ldi	r26, 0x18	; 24
     822:	b0 e0       	ldi	r27, 0x00	; 0
     824:	e6 e1       	ldi	r30, 0x16	; 22
     826:	f4 e0       	ldi	r31, 0x04	; 4
     828:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__prologue_saves__+0x18>
     82c:	69 83       	std	Y+1, r22	; 0x01
     82e:	7a 83       	std	Y+2, r23	; 0x02
     830:	8b 83       	std	Y+3, r24	; 0x03
     832:	9c 83       	std	Y+4, r25	; 0x04
     834:	2d 83       	std	Y+5, r18	; 0x05
     836:	3e 83       	std	Y+6, r19	; 0x06
     838:	4f 83       	std	Y+7, r20	; 0x07
     83a:	58 87       	std	Y+8, r21	; 0x08
     83c:	89 e0       	ldi	r24, 0x09	; 9
     83e:	e8 2e       	mov	r14, r24
     840:	f1 2c       	mov	r15, r1
     842:	ec 0e       	add	r14, r28
     844:	fd 1e       	adc	r15, r29
     846:	ce 01       	movw	r24, r28
     848:	01 96       	adiw	r24, 0x01	; 1
     84a:	b7 01       	movw	r22, r14
     84c:	0e 94 c9 05 	call	0xb92	; 0xb92 <__unpack_f>
     850:	8e 01       	movw	r16, r28
     852:	0f 5e       	subi	r16, 0xEF	; 239
     854:	1f 4f       	sbci	r17, 0xFF	; 255
     856:	ce 01       	movw	r24, r28
     858:	05 96       	adiw	r24, 0x05	; 5
     85a:	b8 01       	movw	r22, r16
     85c:	0e 94 c9 05 	call	0xb92	; 0xb92 <__unpack_f>
     860:	89 85       	ldd	r24, Y+9	; 0x09
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	40 f0       	brcs	.+16     	; 0x876 <__stack+0x17>
     866:	89 89       	ldd	r24, Y+17	; 0x11
     868:	82 30       	cpi	r24, 0x02	; 2
     86a:	28 f0       	brcs	.+10     	; 0x876 <__stack+0x17>
     86c:	c7 01       	movw	r24, r14
     86e:	b8 01       	movw	r22, r16
     870:	0e 94 41 06 	call	0xc82	; 0xc82 <__fpcmp_parts_f>
     874:	01 c0       	rjmp	.+2      	; 0x878 <__stack+0x19>
     876:	8f ef       	ldi	r24, 0xFF	; 255
     878:	68 96       	adiw	r28, 0x18	; 24
     87a:	e6 e0       	ldi	r30, 0x06	; 6
     87c:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__epilogue_restores__+0x18>

00000880 <__gesf2>:
     880:	a8 e1       	ldi	r26, 0x18	; 24
     882:	b0 e0       	ldi	r27, 0x00	; 0
     884:	e6 e4       	ldi	r30, 0x46	; 70
     886:	f4 e0       	ldi	r31, 0x04	; 4
     888:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__prologue_saves__+0x18>
     88c:	69 83       	std	Y+1, r22	; 0x01
     88e:	7a 83       	std	Y+2, r23	; 0x02
     890:	8b 83       	std	Y+3, r24	; 0x03
     892:	9c 83       	std	Y+4, r25	; 0x04
     894:	2d 83       	std	Y+5, r18	; 0x05
     896:	3e 83       	std	Y+6, r19	; 0x06
     898:	4f 83       	std	Y+7, r20	; 0x07
     89a:	58 87       	std	Y+8, r21	; 0x08
     89c:	89 e0       	ldi	r24, 0x09	; 9
     89e:	e8 2e       	mov	r14, r24
     8a0:	f1 2c       	mov	r15, r1
     8a2:	ec 0e       	add	r14, r28
     8a4:	fd 1e       	adc	r15, r29
     8a6:	ce 01       	movw	r24, r28
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	b7 01       	movw	r22, r14
     8ac:	0e 94 c9 05 	call	0xb92	; 0xb92 <__unpack_f>
     8b0:	8e 01       	movw	r16, r28
     8b2:	0f 5e       	subi	r16, 0xEF	; 239
     8b4:	1f 4f       	sbci	r17, 0xFF	; 255
     8b6:	ce 01       	movw	r24, r28
     8b8:	05 96       	adiw	r24, 0x05	; 5
     8ba:	b8 01       	movw	r22, r16
     8bc:	0e 94 c9 05 	call	0xb92	; 0xb92 <__unpack_f>
     8c0:	89 85       	ldd	r24, Y+9	; 0x09
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	40 f0       	brcs	.+16     	; 0x8d6 <__gesf2+0x56>
     8c6:	89 89       	ldd	r24, Y+17	; 0x11
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	28 f0       	brcs	.+10     	; 0x8d6 <__gesf2+0x56>
     8cc:	c7 01       	movw	r24, r14
     8ce:	b8 01       	movw	r22, r16
     8d0:	0e 94 41 06 	call	0xc82	; 0xc82 <__fpcmp_parts_f>
     8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <__gesf2+0x58>
     8d6:	8f ef       	ldi	r24, 0xFF	; 255
     8d8:	68 96       	adiw	r28, 0x18	; 24
     8da:	e6 e0       	ldi	r30, 0x06	; 6
     8dc:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__epilogue_restores__+0x18>

000008e0 <__ltsf2>:
     8e0:	a8 e1       	ldi	r26, 0x18	; 24
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	e6 e7       	ldi	r30, 0x76	; 118
     8e6:	f4 e0       	ldi	r31, 0x04	; 4
     8e8:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__prologue_saves__+0x18>
     8ec:	69 83       	std	Y+1, r22	; 0x01
     8ee:	7a 83       	std	Y+2, r23	; 0x02
     8f0:	8b 83       	std	Y+3, r24	; 0x03
     8f2:	9c 83       	std	Y+4, r25	; 0x04
     8f4:	2d 83       	std	Y+5, r18	; 0x05
     8f6:	3e 83       	std	Y+6, r19	; 0x06
     8f8:	4f 83       	std	Y+7, r20	; 0x07
     8fa:	58 87       	std	Y+8, r21	; 0x08
     8fc:	89 e0       	ldi	r24, 0x09	; 9
     8fe:	e8 2e       	mov	r14, r24
     900:	f1 2c       	mov	r15, r1
     902:	ec 0e       	add	r14, r28
     904:	fd 1e       	adc	r15, r29
     906:	ce 01       	movw	r24, r28
     908:	01 96       	adiw	r24, 0x01	; 1
     90a:	b7 01       	movw	r22, r14
     90c:	0e 94 c9 05 	call	0xb92	; 0xb92 <__unpack_f>
     910:	8e 01       	movw	r16, r28
     912:	0f 5e       	subi	r16, 0xEF	; 239
     914:	1f 4f       	sbci	r17, 0xFF	; 255
     916:	ce 01       	movw	r24, r28
     918:	05 96       	adiw	r24, 0x05	; 5
     91a:	b8 01       	movw	r22, r16
     91c:	0e 94 c9 05 	call	0xb92	; 0xb92 <__unpack_f>
     920:	89 85       	ldd	r24, Y+9	; 0x09
     922:	82 30       	cpi	r24, 0x02	; 2
     924:	40 f0       	brcs	.+16     	; 0x936 <__ltsf2+0x56>
     926:	89 89       	ldd	r24, Y+17	; 0x11
     928:	82 30       	cpi	r24, 0x02	; 2
     92a:	28 f0       	brcs	.+10     	; 0x936 <__ltsf2+0x56>
     92c:	c7 01       	movw	r24, r14
     92e:	b8 01       	movw	r22, r16
     930:	0e 94 41 06 	call	0xc82	; 0xc82 <__fpcmp_parts_f>
     934:	01 c0       	rjmp	.+2      	; 0x938 <__ltsf2+0x58>
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	68 96       	adiw	r28, 0x18	; 24
     93a:	e6 e0       	ldi	r30, 0x06	; 6
     93c:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__epilogue_restores__+0x18>

00000940 <__fixsfsi>:
     940:	ac e0       	ldi	r26, 0x0C	; 12
     942:	b0 e0       	ldi	r27, 0x00	; 0
     944:	e6 ea       	ldi	r30, 0xA6	; 166
     946:	f4 e0       	ldi	r31, 0x04	; 4
     948:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <__prologue_saves__+0x20>
     94c:	69 83       	std	Y+1, r22	; 0x01
     94e:	7a 83       	std	Y+2, r23	; 0x02
     950:	8b 83       	std	Y+3, r24	; 0x03
     952:	9c 83       	std	Y+4, r25	; 0x04
     954:	ce 01       	movw	r24, r28
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	be 01       	movw	r22, r28
     95a:	6b 5f       	subi	r22, 0xFB	; 251
     95c:	7f 4f       	sbci	r23, 0xFF	; 255
     95e:	0e 94 c9 05 	call	0xb92	; 0xb92 <__unpack_f>
     962:	8d 81       	ldd	r24, Y+5	; 0x05
     964:	82 30       	cpi	r24, 0x02	; 2
     966:	61 f1       	breq	.+88     	; 0x9c0 <__fixsfsi+0x80>
     968:	82 30       	cpi	r24, 0x02	; 2
     96a:	50 f1       	brcs	.+84     	; 0x9c0 <__fixsfsi+0x80>
     96c:	84 30       	cpi	r24, 0x04	; 4
     96e:	21 f4       	brne	.+8      	; 0x978 <__fixsfsi+0x38>
     970:	8e 81       	ldd	r24, Y+6	; 0x06
     972:	88 23       	and	r24, r24
     974:	51 f1       	breq	.+84     	; 0x9ca <__fixsfsi+0x8a>
     976:	2e c0       	rjmp	.+92     	; 0x9d4 <__fixsfsi+0x94>
     978:	2f 81       	ldd	r18, Y+7	; 0x07
     97a:	38 85       	ldd	r19, Y+8	; 0x08
     97c:	37 fd       	sbrc	r19, 7
     97e:	20 c0       	rjmp	.+64     	; 0x9c0 <__fixsfsi+0x80>
     980:	6e 81       	ldd	r22, Y+6	; 0x06
     982:	2f 31       	cpi	r18, 0x1F	; 31
     984:	31 05       	cpc	r19, r1
     986:	1c f0       	brlt	.+6      	; 0x98e <__fixsfsi+0x4e>
     988:	66 23       	and	r22, r22
     98a:	f9 f0       	breq	.+62     	; 0x9ca <__fixsfsi+0x8a>
     98c:	23 c0       	rjmp	.+70     	; 0x9d4 <__fixsfsi+0x94>
     98e:	8e e1       	ldi	r24, 0x1E	; 30
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	82 1b       	sub	r24, r18
     994:	93 0b       	sbc	r25, r19
     996:	29 85       	ldd	r18, Y+9	; 0x09
     998:	3a 85       	ldd	r19, Y+10	; 0x0a
     99a:	4b 85       	ldd	r20, Y+11	; 0x0b
     99c:	5c 85       	ldd	r21, Y+12	; 0x0c
     99e:	04 c0       	rjmp	.+8      	; 0x9a8 <__fixsfsi+0x68>
     9a0:	56 95       	lsr	r21
     9a2:	47 95       	ror	r20
     9a4:	37 95       	ror	r19
     9a6:	27 95       	ror	r18
     9a8:	8a 95       	dec	r24
     9aa:	d2 f7       	brpl	.-12     	; 0x9a0 <__fixsfsi+0x60>
     9ac:	66 23       	and	r22, r22
     9ae:	b1 f0       	breq	.+44     	; 0x9dc <__fixsfsi+0x9c>
     9b0:	50 95       	com	r21
     9b2:	40 95       	com	r20
     9b4:	30 95       	com	r19
     9b6:	21 95       	neg	r18
     9b8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ba:	4f 4f       	sbci	r20, 0xFF	; 255
     9bc:	5f 4f       	sbci	r21, 0xFF	; 255
     9be:	0e c0       	rjmp	.+28     	; 0x9dc <__fixsfsi+0x9c>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	09 c0       	rjmp	.+18     	; 0x9dc <__fixsfsi+0x9c>
     9ca:	2f ef       	ldi	r18, 0xFF	; 255
     9cc:	3f ef       	ldi	r19, 0xFF	; 255
     9ce:	4f ef       	ldi	r20, 0xFF	; 255
     9d0:	5f e7       	ldi	r21, 0x7F	; 127
     9d2:	04 c0       	rjmp	.+8      	; 0x9dc <__fixsfsi+0x9c>
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	40 e0       	ldi	r20, 0x00	; 0
     9da:	50 e8       	ldi	r21, 0x80	; 128
     9dc:	b9 01       	movw	r22, r18
     9de:	ca 01       	movw	r24, r20
     9e0:	2c 96       	adiw	r28, 0x0c	; 12
     9e2:	e2 e0       	ldi	r30, 0x02	; 2
     9e4:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <__epilogue_restores__+0x20>

000009e8 <__pack_f>:
     9e8:	df 92       	push	r13
     9ea:	ef 92       	push	r14
     9ec:	ff 92       	push	r15
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
     9f2:	fc 01       	movw	r30, r24
     9f4:	e4 80       	ldd	r14, Z+4	; 0x04
     9f6:	f5 80       	ldd	r15, Z+5	; 0x05
     9f8:	06 81       	ldd	r16, Z+6	; 0x06
     9fa:	17 81       	ldd	r17, Z+7	; 0x07
     9fc:	d1 80       	ldd	r13, Z+1	; 0x01
     9fe:	80 81       	ld	r24, Z
     a00:	82 30       	cpi	r24, 0x02	; 2
     a02:	48 f4       	brcc	.+18     	; 0xa16 <__pack_f+0x2e>
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e1       	ldi	r26, 0x10	; 16
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	e8 2a       	or	r14, r24
     a0e:	f9 2a       	or	r15, r25
     a10:	0a 2b       	or	r16, r26
     a12:	1b 2b       	or	r17, r27
     a14:	a5 c0       	rjmp	.+330    	; 0xb60 <__pack_f+0x178>
     a16:	84 30       	cpi	r24, 0x04	; 4
     a18:	09 f4       	brne	.+2      	; 0xa1c <__pack_f+0x34>
     a1a:	9f c0       	rjmp	.+318    	; 0xb5a <__pack_f+0x172>
     a1c:	82 30       	cpi	r24, 0x02	; 2
     a1e:	21 f4       	brne	.+8      	; 0xa28 <__pack_f+0x40>
     a20:	ee 24       	eor	r14, r14
     a22:	ff 24       	eor	r15, r15
     a24:	87 01       	movw	r16, r14
     a26:	05 c0       	rjmp	.+10     	; 0xa32 <__pack_f+0x4a>
     a28:	e1 14       	cp	r14, r1
     a2a:	f1 04       	cpc	r15, r1
     a2c:	01 05       	cpc	r16, r1
     a2e:	11 05       	cpc	r17, r1
     a30:	19 f4       	brne	.+6      	; 0xa38 <__pack_f+0x50>
     a32:	e0 e0       	ldi	r30, 0x00	; 0
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	96 c0       	rjmp	.+300    	; 0xb64 <__pack_f+0x17c>
     a38:	62 81       	ldd	r22, Z+2	; 0x02
     a3a:	73 81       	ldd	r23, Z+3	; 0x03
     a3c:	9f ef       	ldi	r25, 0xFF	; 255
     a3e:	62 38       	cpi	r22, 0x82	; 130
     a40:	79 07       	cpc	r23, r25
     a42:	0c f0       	brlt	.+2      	; 0xa46 <__pack_f+0x5e>
     a44:	5b c0       	rjmp	.+182    	; 0xafc <__pack_f+0x114>
     a46:	22 e8       	ldi	r18, 0x82	; 130
     a48:	3f ef       	ldi	r19, 0xFF	; 255
     a4a:	26 1b       	sub	r18, r22
     a4c:	37 0b       	sbc	r19, r23
     a4e:	2a 31       	cpi	r18, 0x1A	; 26
     a50:	31 05       	cpc	r19, r1
     a52:	2c f0       	brlt	.+10     	; 0xa5e <__pack_f+0x76>
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	2a c0       	rjmp	.+84     	; 0xab2 <__pack_f+0xca>
     a5e:	b8 01       	movw	r22, r16
     a60:	a7 01       	movw	r20, r14
     a62:	02 2e       	mov	r0, r18
     a64:	04 c0       	rjmp	.+8      	; 0xa6e <__pack_f+0x86>
     a66:	76 95       	lsr	r23
     a68:	67 95       	ror	r22
     a6a:	57 95       	ror	r21
     a6c:	47 95       	ror	r20
     a6e:	0a 94       	dec	r0
     a70:	d2 f7       	brpl	.-12     	; 0xa66 <__pack_f+0x7e>
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	b0 e0       	ldi	r27, 0x00	; 0
     a7a:	04 c0       	rjmp	.+8      	; 0xa84 <__pack_f+0x9c>
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	aa 1f       	adc	r26, r26
     a82:	bb 1f       	adc	r27, r27
     a84:	2a 95       	dec	r18
     a86:	d2 f7       	brpl	.-12     	; 0xa7c <__pack_f+0x94>
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	a1 09       	sbc	r26, r1
     a8c:	b1 09       	sbc	r27, r1
     a8e:	8e 21       	and	r24, r14
     a90:	9f 21       	and	r25, r15
     a92:	a0 23       	and	r26, r16
     a94:	b1 23       	and	r27, r17
     a96:	00 97       	sbiw	r24, 0x00	; 0
     a98:	a1 05       	cpc	r26, r1
     a9a:	b1 05       	cpc	r27, r1
     a9c:	21 f0       	breq	.+8      	; 0xaa6 <__pack_f+0xbe>
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	a0 e0       	ldi	r26, 0x00	; 0
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	9a 01       	movw	r18, r20
     aa8:	ab 01       	movw	r20, r22
     aaa:	28 2b       	or	r18, r24
     aac:	39 2b       	or	r19, r25
     aae:	4a 2b       	or	r20, r26
     ab0:	5b 2b       	or	r21, r27
     ab2:	da 01       	movw	r26, r20
     ab4:	c9 01       	movw	r24, r18
     ab6:	8f 77       	andi	r24, 0x7F	; 127
     ab8:	90 70       	andi	r25, 0x00	; 0
     aba:	a0 70       	andi	r26, 0x00	; 0
     abc:	b0 70       	andi	r27, 0x00	; 0
     abe:	80 34       	cpi	r24, 0x40	; 64
     ac0:	91 05       	cpc	r25, r1
     ac2:	a1 05       	cpc	r26, r1
     ac4:	b1 05       	cpc	r27, r1
     ac6:	39 f4       	brne	.+14     	; 0xad6 <__pack_f+0xee>
     ac8:	27 ff       	sbrs	r18, 7
     aca:	09 c0       	rjmp	.+18     	; 0xade <__pack_f+0xf6>
     acc:	20 5c       	subi	r18, 0xC0	; 192
     ace:	3f 4f       	sbci	r19, 0xFF	; 255
     ad0:	4f 4f       	sbci	r20, 0xFF	; 255
     ad2:	5f 4f       	sbci	r21, 0xFF	; 255
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__pack_f+0xf6>
     ad6:	21 5c       	subi	r18, 0xC1	; 193
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	4f 4f       	sbci	r20, 0xFF	; 255
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	e0 e0       	ldi	r30, 0x00	; 0
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	20 30       	cpi	r18, 0x00	; 0
     ae4:	a0 e0       	ldi	r26, 0x00	; 0
     ae6:	3a 07       	cpc	r19, r26
     ae8:	a0 e0       	ldi	r26, 0x00	; 0
     aea:	4a 07       	cpc	r20, r26
     aec:	a0 e4       	ldi	r26, 0x40	; 64
     aee:	5a 07       	cpc	r21, r26
     af0:	10 f0       	brcs	.+4      	; 0xaf6 <__pack_f+0x10e>
     af2:	e1 e0       	ldi	r30, 0x01	; 1
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	79 01       	movw	r14, r18
     af8:	8a 01       	movw	r16, r20
     afa:	27 c0       	rjmp	.+78     	; 0xb4a <__pack_f+0x162>
     afc:	60 38       	cpi	r22, 0x80	; 128
     afe:	71 05       	cpc	r23, r1
     b00:	64 f5       	brge	.+88     	; 0xb5a <__pack_f+0x172>
     b02:	fb 01       	movw	r30, r22
     b04:	e1 58       	subi	r30, 0x81	; 129
     b06:	ff 4f       	sbci	r31, 0xFF	; 255
     b08:	d8 01       	movw	r26, r16
     b0a:	c7 01       	movw	r24, r14
     b0c:	8f 77       	andi	r24, 0x7F	; 127
     b0e:	90 70       	andi	r25, 0x00	; 0
     b10:	a0 70       	andi	r26, 0x00	; 0
     b12:	b0 70       	andi	r27, 0x00	; 0
     b14:	80 34       	cpi	r24, 0x40	; 64
     b16:	91 05       	cpc	r25, r1
     b18:	a1 05       	cpc	r26, r1
     b1a:	b1 05       	cpc	r27, r1
     b1c:	39 f4       	brne	.+14     	; 0xb2c <__pack_f+0x144>
     b1e:	e7 fe       	sbrs	r14, 7
     b20:	0d c0       	rjmp	.+26     	; 0xb3c <__pack_f+0x154>
     b22:	80 e4       	ldi	r24, 0x40	; 64
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	a0 e0       	ldi	r26, 0x00	; 0
     b28:	b0 e0       	ldi	r27, 0x00	; 0
     b2a:	04 c0       	rjmp	.+8      	; 0xb34 <__pack_f+0x14c>
     b2c:	8f e3       	ldi	r24, 0x3F	; 63
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	e8 0e       	add	r14, r24
     b36:	f9 1e       	adc	r15, r25
     b38:	0a 1f       	adc	r16, r26
     b3a:	1b 1f       	adc	r17, r27
     b3c:	17 ff       	sbrs	r17, 7
     b3e:	05 c0       	rjmp	.+10     	; 0xb4a <__pack_f+0x162>
     b40:	16 95       	lsr	r17
     b42:	07 95       	ror	r16
     b44:	f7 94       	ror	r15
     b46:	e7 94       	ror	r14
     b48:	31 96       	adiw	r30, 0x01	; 1
     b4a:	87 e0       	ldi	r24, 0x07	; 7
     b4c:	16 95       	lsr	r17
     b4e:	07 95       	ror	r16
     b50:	f7 94       	ror	r15
     b52:	e7 94       	ror	r14
     b54:	8a 95       	dec	r24
     b56:	d1 f7       	brne	.-12     	; 0xb4c <__pack_f+0x164>
     b58:	05 c0       	rjmp	.+10     	; 0xb64 <__pack_f+0x17c>
     b5a:	ee 24       	eor	r14, r14
     b5c:	ff 24       	eor	r15, r15
     b5e:	87 01       	movw	r16, r14
     b60:	ef ef       	ldi	r30, 0xFF	; 255
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	6e 2f       	mov	r22, r30
     b66:	67 95       	ror	r22
     b68:	66 27       	eor	r22, r22
     b6a:	67 95       	ror	r22
     b6c:	90 2f       	mov	r25, r16
     b6e:	9f 77       	andi	r25, 0x7F	; 127
     b70:	d7 94       	ror	r13
     b72:	dd 24       	eor	r13, r13
     b74:	d7 94       	ror	r13
     b76:	8e 2f       	mov	r24, r30
     b78:	86 95       	lsr	r24
     b7a:	49 2f       	mov	r20, r25
     b7c:	46 2b       	or	r20, r22
     b7e:	58 2f       	mov	r21, r24
     b80:	5d 29       	or	r21, r13
     b82:	b7 01       	movw	r22, r14
     b84:	ca 01       	movw	r24, r20
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	ff 90       	pop	r15
     b8c:	ef 90       	pop	r14
     b8e:	df 90       	pop	r13
     b90:	08 95       	ret

00000b92 <__unpack_f>:
     b92:	fc 01       	movw	r30, r24
     b94:	db 01       	movw	r26, r22
     b96:	40 81       	ld	r20, Z
     b98:	51 81       	ldd	r21, Z+1	; 0x01
     b9a:	22 81       	ldd	r18, Z+2	; 0x02
     b9c:	62 2f       	mov	r22, r18
     b9e:	6f 77       	andi	r22, 0x7F	; 127
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	22 1f       	adc	r18, r18
     ba4:	22 27       	eor	r18, r18
     ba6:	22 1f       	adc	r18, r18
     ba8:	93 81       	ldd	r25, Z+3	; 0x03
     baa:	89 2f       	mov	r24, r25
     bac:	88 0f       	add	r24, r24
     bae:	82 2b       	or	r24, r18
     bb0:	28 2f       	mov	r18, r24
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	99 1f       	adc	r25, r25
     bb6:	99 27       	eor	r25, r25
     bb8:	99 1f       	adc	r25, r25
     bba:	11 96       	adiw	r26, 0x01	; 1
     bbc:	9c 93       	st	X, r25
     bbe:	11 97       	sbiw	r26, 0x01	; 1
     bc0:	21 15       	cp	r18, r1
     bc2:	31 05       	cpc	r19, r1
     bc4:	a9 f5       	brne	.+106    	; 0xc30 <__unpack_f+0x9e>
     bc6:	41 15       	cp	r20, r1
     bc8:	51 05       	cpc	r21, r1
     bca:	61 05       	cpc	r22, r1
     bcc:	71 05       	cpc	r23, r1
     bce:	11 f4       	brne	.+4      	; 0xbd4 <__unpack_f+0x42>
     bd0:	82 e0       	ldi	r24, 0x02	; 2
     bd2:	37 c0       	rjmp	.+110    	; 0xc42 <__unpack_f+0xb0>
     bd4:	82 e8       	ldi	r24, 0x82	; 130
     bd6:	9f ef       	ldi	r25, 0xFF	; 255
     bd8:	13 96       	adiw	r26, 0x03	; 3
     bda:	9c 93       	st	X, r25
     bdc:	8e 93       	st	-X, r24
     bde:	12 97       	sbiw	r26, 0x02	; 2
     be0:	9a 01       	movw	r18, r20
     be2:	ab 01       	movw	r20, r22
     be4:	67 e0       	ldi	r22, 0x07	; 7
     be6:	22 0f       	add	r18, r18
     be8:	33 1f       	adc	r19, r19
     bea:	44 1f       	adc	r20, r20
     bec:	55 1f       	adc	r21, r21
     bee:	6a 95       	dec	r22
     bf0:	d1 f7       	brne	.-12     	; 0xbe6 <__unpack_f+0x54>
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	0d c0       	rjmp	.+26     	; 0xc12 <__unpack_f+0x80>
     bf8:	22 0f       	add	r18, r18
     bfa:	33 1f       	adc	r19, r19
     bfc:	44 1f       	adc	r20, r20
     bfe:	55 1f       	adc	r21, r21
     c00:	12 96       	adiw	r26, 0x02	; 2
     c02:	8d 91       	ld	r24, X+
     c04:	9c 91       	ld	r25, X
     c06:	13 97       	sbiw	r26, 0x03	; 3
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	13 96       	adiw	r26, 0x03	; 3
     c0c:	9c 93       	st	X, r25
     c0e:	8e 93       	st	-X, r24
     c10:	12 97       	sbiw	r26, 0x02	; 2
     c12:	20 30       	cpi	r18, 0x00	; 0
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	38 07       	cpc	r19, r24
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	48 07       	cpc	r20, r24
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	58 07       	cpc	r21, r24
     c20:	58 f3       	brcs	.-42     	; 0xbf8 <__unpack_f+0x66>
     c22:	14 96       	adiw	r26, 0x04	; 4
     c24:	2d 93       	st	X+, r18
     c26:	3d 93       	st	X+, r19
     c28:	4d 93       	st	X+, r20
     c2a:	5c 93       	st	X, r21
     c2c:	17 97       	sbiw	r26, 0x07	; 7
     c2e:	08 95       	ret
     c30:	2f 3f       	cpi	r18, 0xFF	; 255
     c32:	31 05       	cpc	r19, r1
     c34:	79 f4       	brne	.+30     	; 0xc54 <__unpack_f+0xc2>
     c36:	41 15       	cp	r20, r1
     c38:	51 05       	cpc	r21, r1
     c3a:	61 05       	cpc	r22, r1
     c3c:	71 05       	cpc	r23, r1
     c3e:	19 f4       	brne	.+6      	; 0xc46 <__unpack_f+0xb4>
     c40:	84 e0       	ldi	r24, 0x04	; 4
     c42:	8c 93       	st	X, r24
     c44:	08 95       	ret
     c46:	64 ff       	sbrs	r22, 4
     c48:	03 c0       	rjmp	.+6      	; 0xc50 <__unpack_f+0xbe>
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	8c 93       	st	X, r24
     c4e:	12 c0       	rjmp	.+36     	; 0xc74 <__unpack_f+0xe2>
     c50:	1c 92       	st	X, r1
     c52:	10 c0       	rjmp	.+32     	; 0xc74 <__unpack_f+0xe2>
     c54:	2f 57       	subi	r18, 0x7F	; 127
     c56:	30 40       	sbci	r19, 0x00	; 0
     c58:	13 96       	adiw	r26, 0x03	; 3
     c5a:	3c 93       	st	X, r19
     c5c:	2e 93       	st	-X, r18
     c5e:	12 97       	sbiw	r26, 0x02	; 2
     c60:	83 e0       	ldi	r24, 0x03	; 3
     c62:	8c 93       	st	X, r24
     c64:	87 e0       	ldi	r24, 0x07	; 7
     c66:	44 0f       	add	r20, r20
     c68:	55 1f       	adc	r21, r21
     c6a:	66 1f       	adc	r22, r22
     c6c:	77 1f       	adc	r23, r23
     c6e:	8a 95       	dec	r24
     c70:	d1 f7       	brne	.-12     	; 0xc66 <__unpack_f+0xd4>
     c72:	70 64       	ori	r23, 0x40	; 64
     c74:	14 96       	adiw	r26, 0x04	; 4
     c76:	4d 93       	st	X+, r20
     c78:	5d 93       	st	X+, r21
     c7a:	6d 93       	st	X+, r22
     c7c:	7c 93       	st	X, r23
     c7e:	17 97       	sbiw	r26, 0x07	; 7
     c80:	08 95       	ret

00000c82 <__fpcmp_parts_f>:
     c82:	1f 93       	push	r17
     c84:	dc 01       	movw	r26, r24
     c86:	fb 01       	movw	r30, r22
     c88:	9c 91       	ld	r25, X
     c8a:	92 30       	cpi	r25, 0x02	; 2
     c8c:	08 f4       	brcc	.+2      	; 0xc90 <__fpcmp_parts_f+0xe>
     c8e:	47 c0       	rjmp	.+142    	; 0xd1e <__fpcmp_parts_f+0x9c>
     c90:	80 81       	ld	r24, Z
     c92:	82 30       	cpi	r24, 0x02	; 2
     c94:	08 f4       	brcc	.+2      	; 0xc98 <__fpcmp_parts_f+0x16>
     c96:	43 c0       	rjmp	.+134    	; 0xd1e <__fpcmp_parts_f+0x9c>
     c98:	94 30       	cpi	r25, 0x04	; 4
     c9a:	51 f4       	brne	.+20     	; 0xcb0 <__fpcmp_parts_f+0x2e>
     c9c:	11 96       	adiw	r26, 0x01	; 1
     c9e:	1c 91       	ld	r17, X
     ca0:	84 30       	cpi	r24, 0x04	; 4
     ca2:	99 f5       	brne	.+102    	; 0xd0a <__fpcmp_parts_f+0x88>
     ca4:	81 81       	ldd	r24, Z+1	; 0x01
     ca6:	68 2f       	mov	r22, r24
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	61 1b       	sub	r22, r17
     cac:	71 09       	sbc	r23, r1
     cae:	3f c0       	rjmp	.+126    	; 0xd2e <__fpcmp_parts_f+0xac>
     cb0:	84 30       	cpi	r24, 0x04	; 4
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__fpcmp_parts_f+0x3a>
     cb4:	92 30       	cpi	r25, 0x02	; 2
     cb6:	31 f4       	brne	.+12     	; 0xcc4 <__fpcmp_parts_f+0x42>
     cb8:	82 30       	cpi	r24, 0x02	; 2
     cba:	b9 f1       	breq	.+110    	; 0xd2a <__fpcmp_parts_f+0xa8>
     cbc:	81 81       	ldd	r24, Z+1	; 0x01
     cbe:	88 23       	and	r24, r24
     cc0:	89 f1       	breq	.+98     	; 0xd24 <__fpcmp_parts_f+0xa2>
     cc2:	2d c0       	rjmp	.+90     	; 0xd1e <__fpcmp_parts_f+0x9c>
     cc4:	11 96       	adiw	r26, 0x01	; 1
     cc6:	1c 91       	ld	r17, X
     cc8:	11 97       	sbiw	r26, 0x01	; 1
     cca:	82 30       	cpi	r24, 0x02	; 2
     ccc:	f1 f0       	breq	.+60     	; 0xd0a <__fpcmp_parts_f+0x88>
     cce:	81 81       	ldd	r24, Z+1	; 0x01
     cd0:	18 17       	cp	r17, r24
     cd2:	d9 f4       	brne	.+54     	; 0xd0a <__fpcmp_parts_f+0x88>
     cd4:	12 96       	adiw	r26, 0x02	; 2
     cd6:	2d 91       	ld	r18, X+
     cd8:	3c 91       	ld	r19, X
     cda:	13 97       	sbiw	r26, 0x03	; 3
     cdc:	82 81       	ldd	r24, Z+2	; 0x02
     cde:	93 81       	ldd	r25, Z+3	; 0x03
     ce0:	82 17       	cp	r24, r18
     ce2:	93 07       	cpc	r25, r19
     ce4:	94 f0       	brlt	.+36     	; 0xd0a <__fpcmp_parts_f+0x88>
     ce6:	28 17       	cp	r18, r24
     ce8:	39 07       	cpc	r19, r25
     cea:	bc f0       	brlt	.+46     	; 0xd1a <__fpcmp_parts_f+0x98>
     cec:	14 96       	adiw	r26, 0x04	; 4
     cee:	8d 91       	ld	r24, X+
     cf0:	9d 91       	ld	r25, X+
     cf2:	0d 90       	ld	r0, X+
     cf4:	bc 91       	ld	r27, X
     cf6:	a0 2d       	mov	r26, r0
     cf8:	24 81       	ldd	r18, Z+4	; 0x04
     cfa:	35 81       	ldd	r19, Z+5	; 0x05
     cfc:	46 81       	ldd	r20, Z+6	; 0x06
     cfe:	57 81       	ldd	r21, Z+7	; 0x07
     d00:	28 17       	cp	r18, r24
     d02:	39 07       	cpc	r19, r25
     d04:	4a 07       	cpc	r20, r26
     d06:	5b 07       	cpc	r21, r27
     d08:	18 f4       	brcc	.+6      	; 0xd10 <__fpcmp_parts_f+0x8e>
     d0a:	11 23       	and	r17, r17
     d0c:	41 f0       	breq	.+16     	; 0xd1e <__fpcmp_parts_f+0x9c>
     d0e:	0a c0       	rjmp	.+20     	; 0xd24 <__fpcmp_parts_f+0xa2>
     d10:	82 17       	cp	r24, r18
     d12:	93 07       	cpc	r25, r19
     d14:	a4 07       	cpc	r26, r20
     d16:	b5 07       	cpc	r27, r21
     d18:	40 f4       	brcc	.+16     	; 0xd2a <__fpcmp_parts_f+0xa8>
     d1a:	11 23       	and	r17, r17
     d1c:	19 f0       	breq	.+6      	; 0xd24 <__fpcmp_parts_f+0xa2>
     d1e:	61 e0       	ldi	r22, 0x01	; 1
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	05 c0       	rjmp	.+10     	; 0xd2e <__fpcmp_parts_f+0xac>
     d24:	6f ef       	ldi	r22, 0xFF	; 255
     d26:	7f ef       	ldi	r23, 0xFF	; 255
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <__fpcmp_parts_f+0xac>
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	cb 01       	movw	r24, r22
     d30:	1f 91       	pop	r17
     d32:	08 95       	ret

00000d34 <GLCD_Initialize>:
#include "Font5x8.h"
#include <util/delay.h>

// Initialize the GLCD
void GLCD_Initialize(void)
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	2e 97       	sbiw	r28, 0x0e	; 14
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
    // Set data and control pins as output
    GLCD_DDR_DATA = 0xFF;  // Data pins D0-D7 as output
     d48:	ea e3       	ldi	r30, 0x3A	; 58
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	8f ef       	ldi	r24, 0xFF	; 255
     d4e:	80 83       	st	Z, r24
    GLCD_DDR_CTRL |= (1 << GLCD_DI) | (1 << GLCD_RW) | (1 << GLCD_EN) | (1 << GLCD_CS1) | (1 << GLCD_CS2) | (1 << GLCD_RST);
     d50:	a7 e3       	ldi	r26, 0x37	; 55
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e7 e3       	ldi	r30, 0x37	; 55
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	8f 63       	ori	r24, 0x3F	; 63
     d5c:	8c 93       	st	X, r24

    // Reset the GLCD
    GLCD_CTRL_PORT &= ~(1 << GLCD_RST);  // Pull RESET low
     d5e:	a8 e3       	ldi	r26, 0x38	; 56
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e8 e3       	ldi	r30, 0x38	; 56
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	8f 7d       	andi	r24, 0xDF	; 223
     d6a:	8c 93       	st	X, r24
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	a0 e2       	ldi	r26, 0x20	; 32
     d72:	b1 e4       	ldi	r27, 0x41	; 65
     d74:	8b 87       	std	Y+11, r24	; 0x0b
     d76:	9c 87       	std	Y+12, r25	; 0x0c
     d78:	ad 87       	std	Y+13, r26	; 0x0d
     d7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d7c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d7e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d80:	8d 85       	ldd	r24, Y+13	; 0x0d
     d82:	9e 85       	ldd	r25, Y+14	; 0x0e
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	4a e7       	ldi	r20, 0x7A	; 122
     d8a:	55 e4       	ldi	r21, 0x45	; 69
     d8c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	8f 83       	std	Y+7, r24	; 0x07
     d96:	98 87       	std	Y+8, r25	; 0x08
     d98:	a9 87       	std	Y+9, r26	; 0x09
     d9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d9c:	6f 81       	ldd	r22, Y+7	; 0x07
     d9e:	78 85       	ldd	r23, Y+8	; 0x08
     da0:	89 85       	ldd	r24, Y+9	; 0x09
     da2:	9a 85       	ldd	r25, Y+10	; 0x0a
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e8       	ldi	r20, 0x80	; 128
     daa:	5f e3       	ldi	r21, 0x3F	; 63
     dac:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__ltsf2>
     db0:	88 23       	and	r24, r24
     db2:	2c f4       	brge	.+10     	; 0xdbe <GLCD_Initialize+0x8a>
		__ticks = 1;
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	9e 83       	std	Y+6, r25	; 0x06
     dba:	8d 83       	std	Y+5, r24	; 0x05
     dbc:	3f c0       	rjmp	.+126    	; 0xe3c <GLCD_Initialize+0x108>
	else if (__tmp > 65535)
     dbe:	6f 81       	ldd	r22, Y+7	; 0x07
     dc0:	78 85       	ldd	r23, Y+8	; 0x08
     dc2:	89 85       	ldd	r24, Y+9	; 0x09
     dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	3f ef       	ldi	r19, 0xFF	; 255
     dca:	4f e7       	ldi	r20, 0x7F	; 127
     dcc:	57 e4       	ldi	r21, 0x47	; 71
     dce:	0e 94 10 04 	call	0x820	; 0x820 <__gtsf2>
     dd2:	18 16       	cp	r1, r24
     dd4:	4c f5       	brge	.+82     	; 0xe28 <GLCD_Initialize+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
     dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
     dda:	8d 85       	ldd	r24, Y+13	; 0x0d
     ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 e2       	ldi	r20, 0x20	; 32
     de4:	51 e4       	ldi	r21, 0x41	; 65
     de6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	bc 01       	movw	r22, r24
     df0:	cd 01       	movw	r24, r26
     df2:	0e 94 94 00 	call	0x128	; 0x128 <__fixunssfsi>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	9e 83       	std	Y+6, r25	; 0x06
     dfc:	8d 83       	std	Y+5, r24	; 0x05
     dfe:	0f c0       	rjmp	.+30     	; 0xe1e <GLCD_Initialize+0xea>
     e00:	80 e9       	ldi	r24, 0x90	; 144
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	9c 83       	std	Y+4, r25	; 0x04
     e06:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	9c 81       	ldd	r25, Y+4	; 0x04
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	f1 f7       	brne	.-4      	; 0xe0c <GLCD_Initialize+0xd8>
     e10:	9c 83       	std	Y+4, r25	; 0x04
     e12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e14:	8d 81       	ldd	r24, Y+5	; 0x05
     e16:	9e 81       	ldd	r25, Y+6	; 0x06
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	9e 83       	std	Y+6, r25	; 0x06
     e1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e1e:	8d 81       	ldd	r24, Y+5	; 0x05
     e20:	9e 81       	ldd	r25, Y+6	; 0x06
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	69 f7       	brne	.-38     	; 0xe00 <GLCD_Initialize+0xcc>
     e26:	14 c0       	rjmp	.+40     	; 0xe50 <GLCD_Initialize+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e28:	6f 81       	ldd	r22, Y+7	; 0x07
     e2a:	78 85       	ldd	r23, Y+8	; 0x08
     e2c:	89 85       	ldd	r24, Y+9	; 0x09
     e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e30:	0e 94 94 00 	call	0x128	; 0x128 <__fixunssfsi>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	9e 83       	std	Y+6, r25	; 0x06
     e3a:	8d 83       	std	Y+5, r24	; 0x05
     e3c:	8d 81       	ldd	r24, Y+5	; 0x05
     e3e:	9e 81       	ldd	r25, Y+6	; 0x06
     e40:	9a 83       	std	Y+2, r25	; 0x02
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <GLCD_Initialize+0x114>
     e4c:	9a 83       	std	Y+2, r25	; 0x02
     e4e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);                       // Wait 10 ms
    GLCD_CTRL_PORT |= (1 << GLCD_RST);   // Release RESET
     e50:	a8 e3       	ldi	r26, 0x38	; 56
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e8 e3       	ldi	r30, 0x38	; 56
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	80 62       	ori	r24, 0x20	; 32
     e5c:	8c 93       	st	X, r24

    // Turn on both halves of the GLCD
    GLCD_WriteCommand(0x3F, 0);  // Turn on the left chip
     e5e:	8f e3       	ldi	r24, 0x3F	; 63
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	0e 94 40 07 	call	0xe80	; 0xe80 <GLCD_WriteCommand>
    GLCD_WriteCommand(0x3F, 1);  // Turn on the right chip
     e66:	8f e3       	ldi	r24, 0x3F	; 63
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	0e 94 40 07 	call	0xe80	; 0xe80 <GLCD_WriteCommand>
}
     e6e:	2e 96       	adiw	r28, 0x0e	; 14
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <GLCD_WriteCommand>:

// Write a command to the GLCD
void GLCD_WriteCommand(uint8_t command, uint8_t chip)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	6a 97       	sbiw	r28, 0x1a	; 26
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61
     e94:	89 8f       	std	Y+25, r24	; 0x19
     e96:	6a 8f       	std	Y+26, r22	; 0x1a
    // Select the chip
    if (chip == 0)
     e98:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e9a:	88 23       	and	r24, r24
     e9c:	79 f4       	brne	.+30     	; 0xebc <GLCD_WriteCommand+0x3c>
    {
        GLCD_CTRL_PORT &= ~(1 << GLCD_CS1); // Enable left chip
     e9e:	a8 e3       	ldi	r26, 0x38	; 56
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e8 e3       	ldi	r30, 0x38	; 56
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	87 7f       	andi	r24, 0xF7	; 247
     eaa:	8c 93       	st	X, r24
        GLCD_CTRL_PORT |= (1 << GLCD_CS2);  // Disable right chip
     eac:	a8 e3       	ldi	r26, 0x38	; 56
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e8 e3       	ldi	r30, 0x38	; 56
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	80 61       	ori	r24, 0x10	; 16
     eb8:	8c 93       	st	X, r24
     eba:	11 c0       	rjmp	.+34     	; 0xede <GLCD_WriteCommand+0x5e>
    }
    else if (chip == 1)
     ebc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	71 f4       	brne	.+28     	; 0xede <GLCD_WriteCommand+0x5e>
    {
        GLCD_CTRL_PORT &= ~(1 << GLCD_CS2); // Enable right chip
     ec2:	a8 e3       	ldi	r26, 0x38	; 56
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e8 e3       	ldi	r30, 0x38	; 56
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	8f 7e       	andi	r24, 0xEF	; 239
     ece:	8c 93       	st	X, r24
        GLCD_CTRL_PORT |= (1 << GLCD_CS1);  // Disable left chip
     ed0:	a8 e3       	ldi	r26, 0x38	; 56
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e8 e3       	ldi	r30, 0x38	; 56
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	88 60       	ori	r24, 0x08	; 8
     edc:	8c 93       	st	X, r24
    }

    // Set control lines for command mode
    GLCD_CTRL_PORT &= ~(1 << GLCD_DI); // DI = 0 (Command mode)
     ede:	a8 e3       	ldi	r26, 0x38	; 56
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e8 e3       	ldi	r30, 0x38	; 56
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8e 7f       	andi	r24, 0xFE	; 254
     eea:	8c 93       	st	X, r24
    GLCD_CTRL_PORT &= ~(1 << GLCD_RW); // RW = 0 (Write mode)
     eec:	a8 e3       	ldi	r26, 0x38	; 56
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e8 e3       	ldi	r30, 0x38	; 56
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	8d 7f       	andi	r24, 0xFD	; 253
     ef8:	8c 93       	st	X, r24

    // Write the command to the data port
    GLCD_DATA_PORT = command;
     efa:	eb e3       	ldi	r30, 0x3B	; 59
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	89 8d       	ldd	r24, Y+25	; 0x19
     f00:	80 83       	st	Z, r24

    // Generate enable pulse
    GLCD_CTRL_PORT |= (1 << GLCD_EN);  // EN = 1
     f02:	a8 e3       	ldi	r26, 0x38	; 56
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e8 e3       	ldi	r30, 0x38	; 56
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	84 60       	ori	r24, 0x04	; 4
     f0e:	8c 93       	st	X, r24
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	a0 e8       	ldi	r26, 0x80	; 128
     f16:	bf e3       	ldi	r27, 0x3F	; 63
     f18:	8d 8b       	std	Y+21, r24	; 0x15
     f1a:	9e 8b       	std	Y+22, r25	; 0x16
     f1c:	af 8b       	std	Y+23, r26	; 0x17
     f1e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f20:	6d 89       	ldd	r22, Y+21	; 0x15
     f22:	7e 89       	ldd	r23, Y+22	; 0x16
     f24:	8f 89       	ldd	r24, Y+23	; 0x17
     f26:	98 8d       	ldd	r25, Y+24	; 0x18
     f28:	2b ea       	ldi	r18, 0xAB	; 171
     f2a:	3a ea       	ldi	r19, 0xAA	; 170
     f2c:	4a ea       	ldi	r20, 0xAA	; 170
     f2e:	50 e4       	ldi	r21, 0x40	; 64
     f30:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	89 8b       	std	Y+17, r24	; 0x11
     f3a:	9a 8b       	std	Y+18, r25	; 0x12
     f3c:	ab 8b       	std	Y+19, r26	; 0x13
     f3e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     f40:	69 89       	ldd	r22, Y+17	; 0x11
     f42:	7a 89       	ldd	r23, Y+18	; 0x12
     f44:	8b 89       	ldd	r24, Y+19	; 0x13
     f46:	9c 89       	ldd	r25, Y+20	; 0x14
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	40 e8       	ldi	r20, 0x80	; 128
     f4e:	5f e3       	ldi	r21, 0x3F	; 63
     f50:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__ltsf2>
     f54:	88 23       	and	r24, r24
     f56:	1c f4       	brge	.+6      	; 0xf5e <GLCD_WriteCommand+0xde>
		__ticks = 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	88 8b       	std	Y+16, r24	; 0x10
     f5c:	91 c0       	rjmp	.+290    	; 0x1080 <GLCD_WriteCommand+0x200>
	else if (__tmp > 255)
     f5e:	69 89       	ldd	r22, Y+17	; 0x11
     f60:	7a 89       	ldd	r23, Y+18	; 0x12
     f62:	8b 89       	ldd	r24, Y+19	; 0x13
     f64:	9c 89       	ldd	r25, Y+20	; 0x14
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	4f e7       	ldi	r20, 0x7F	; 127
     f6c:	53 e4       	ldi	r21, 0x43	; 67
     f6e:	0e 94 10 04 	call	0x820	; 0x820 <__gtsf2>
     f72:	18 16       	cp	r1, r24
     f74:	0c f0       	brlt	.+2      	; 0xf78 <GLCD_WriteCommand+0xf8>
     f76:	7b c0       	rjmp	.+246    	; 0x106e <GLCD_WriteCommand+0x1ee>
	{
		_delay_ms(__us / 1000.0);
     f78:	6d 89       	ldd	r22, Y+21	; 0x15
     f7a:	7e 89       	ldd	r23, Y+22	; 0x16
     f7c:	8f 89       	ldd	r24, Y+23	; 0x17
     f7e:	98 8d       	ldd	r25, Y+24	; 0x18
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	4a e7       	ldi	r20, 0x7A	; 122
     f86:	54 e4       	ldi	r21, 0x44	; 68
     f88:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__divsf3>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	8c 87       	std	Y+12, r24	; 0x0c
     f92:	9d 87       	std	Y+13, r25	; 0x0d
     f94:	ae 87       	std	Y+14, r26	; 0x0e
     f96:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f98:	6c 85       	ldd	r22, Y+12	; 0x0c
     f9a:	7d 85       	ldd	r23, Y+13	; 0x0d
     f9c:	8e 85       	ldd	r24, Y+14	; 0x0e
     f9e:	9f 85       	ldd	r25, Y+15	; 0x0f
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	4a e7       	ldi	r20, 0x7A	; 122
     fa6:	55 e4       	ldi	r21, 0x45	; 69
     fa8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	88 87       	std	Y+8, r24	; 0x08
     fb2:	99 87       	std	Y+9, r25	; 0x09
     fb4:	aa 87       	std	Y+10, r26	; 0x0a
     fb6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     fb8:	68 85       	ldd	r22, Y+8	; 0x08
     fba:	79 85       	ldd	r23, Y+9	; 0x09
     fbc:	8a 85       	ldd	r24, Y+10	; 0x0a
     fbe:	9b 85       	ldd	r25, Y+11	; 0x0b
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e8       	ldi	r20, 0x80	; 128
     fc6:	5f e3       	ldi	r21, 0x3F	; 63
     fc8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__ltsf2>
     fcc:	88 23       	and	r24, r24
     fce:	2c f4       	brge	.+10     	; 0xfda <GLCD_WriteCommand+0x15a>
		__ticks = 1;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9f 83       	std	Y+7, r25	; 0x07
     fd6:	8e 83       	std	Y+6, r24	; 0x06
     fd8:	3f c0       	rjmp	.+126    	; 0x1058 <GLCD_WriteCommand+0x1d8>
	else if (__tmp > 65535)
     fda:	68 85       	ldd	r22, Y+8	; 0x08
     fdc:	79 85       	ldd	r23, Y+9	; 0x09
     fde:	8a 85       	ldd	r24, Y+10	; 0x0a
     fe0:	9b 85       	ldd	r25, Y+11	; 0x0b
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	3f ef       	ldi	r19, 0xFF	; 255
     fe6:	4f e7       	ldi	r20, 0x7F	; 127
     fe8:	57 e4       	ldi	r21, 0x47	; 71
     fea:	0e 94 10 04 	call	0x820	; 0x820 <__gtsf2>
     fee:	18 16       	cp	r1, r24
     ff0:	4c f5       	brge	.+82     	; 0x1044 <GLCD_WriteCommand+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff2:	6c 85       	ldd	r22, Y+12	; 0x0c
     ff4:	7d 85       	ldd	r23, Y+13	; 0x0d
     ff6:	8e 85       	ldd	r24, Y+14	; 0x0e
     ff8:	9f 85       	ldd	r25, Y+15	; 0x0f
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e2       	ldi	r20, 0x20	; 32
    1000:	51 e4       	ldi	r21, 0x41	; 65
    1002:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	bc 01       	movw	r22, r24
    100c:	cd 01       	movw	r24, r26
    100e:	0e 94 94 00 	call	0x128	; 0x128 <__fixunssfsi>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	9f 83       	std	Y+7, r25	; 0x07
    1018:	8e 83       	std	Y+6, r24	; 0x06
    101a:	0f c0       	rjmp	.+30     	; 0x103a <GLCD_WriteCommand+0x1ba>
    101c:	80 e9       	ldi	r24, 0x90	; 144
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	9d 83       	std	Y+5, r25	; 0x05
    1022:	8c 83       	std	Y+4, r24	; 0x04
    1024:	8c 81       	ldd	r24, Y+4	; 0x04
    1026:	9d 81       	ldd	r25, Y+5	; 0x05
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <GLCD_WriteCommand+0x1a8>
    102c:	9d 83       	std	Y+5, r25	; 0x05
    102e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1030:	8e 81       	ldd	r24, Y+6	; 0x06
    1032:	9f 81       	ldd	r25, Y+7	; 0x07
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	9f 83       	std	Y+7, r25	; 0x07
    1038:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103a:	8e 81       	ldd	r24, Y+6	; 0x06
    103c:	9f 81       	ldd	r25, Y+7	; 0x07
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	69 f7       	brne	.-38     	; 0x101c <GLCD_WriteCommand+0x19c>
    1042:	24 c0       	rjmp	.+72     	; 0x108c <GLCD_WriteCommand+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1044:	68 85       	ldd	r22, Y+8	; 0x08
    1046:	79 85       	ldd	r23, Y+9	; 0x09
    1048:	8a 85       	ldd	r24, Y+10	; 0x0a
    104a:	9b 85       	ldd	r25, Y+11	; 0x0b
    104c:	0e 94 94 00 	call	0x128	; 0x128 <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	9f 83       	std	Y+7, r25	; 0x07
    1056:	8e 83       	std	Y+6, r24	; 0x06
    1058:	8e 81       	ldd	r24, Y+6	; 0x06
    105a:	9f 81       	ldd	r25, Y+7	; 0x07
    105c:	9b 83       	std	Y+3, r25	; 0x03
    105e:	8a 83       	std	Y+2, r24	; 0x02
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	9b 81       	ldd	r25, Y+3	; 0x03
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <GLCD_WriteCommand+0x1e4>
    1068:	9b 83       	std	Y+3, r25	; 0x03
    106a:	8a 83       	std	Y+2, r24	; 0x02
    106c:	0f c0       	rjmp	.+30     	; 0x108c <GLCD_WriteCommand+0x20c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    106e:	69 89       	ldd	r22, Y+17	; 0x11
    1070:	7a 89       	ldd	r23, Y+18	; 0x12
    1072:	8b 89       	ldd	r24, Y+19	; 0x13
    1074:	9c 89       	ldd	r25, Y+20	; 0x14
    1076:	0e 94 94 00 	call	0x128	; 0x128 <__fixunssfsi>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	88 8b       	std	Y+16, r24	; 0x10
    1080:	88 89       	ldd	r24, Y+16	; 0x10
    1082:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	8a 95       	dec	r24
    1088:	f1 f7       	brne	.-4      	; 0x1086 <GLCD_WriteCommand+0x206>
    108a:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);                      // Small delay
    GLCD_CTRL_PORT &= ~(1 << GLCD_EN); // EN = 0
    108c:	a8 e3       	ldi	r26, 0x38	; 56
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e8 e3       	ldi	r30, 0x38	; 56
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	8b 7f       	andi	r24, 0xFB	; 251
    1098:	8c 93       	st	X, r24

    // Deselect chips
    GLCD_CTRL_PORT |= (1 << GLCD_CS1) | (1 << GLCD_CS2);
    109a:	a8 e3       	ldi	r26, 0x38	; 56
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e8 e3       	ldi	r30, 0x38	; 56
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	88 61       	ori	r24, 0x18	; 24
    10a6:	8c 93       	st	X, r24
}
    10a8:	6a 96       	adiw	r28, 0x1a	; 26
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <GLCD_WriteData>:

// Write data to the GLCD
void GLCD_WriteData(uint8_t data)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	69 97       	sbiw	r28, 0x19	; 25
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	89 8f       	std	Y+25, r24	; 0x19
    // Enable both chips (depending on where you are writing)
    GLCD_CTRL_PORT &= ~(1 << GLCD_CS1); // Enable left chip
    10d0:	a8 e3       	ldi	r26, 0x38	; 56
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e8 e3       	ldi	r30, 0x38	; 56
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	87 7f       	andi	r24, 0xF7	; 247
    10dc:	8c 93       	st	X, r24
    GLCD_CTRL_PORT |= (1 << GLCD_CS2);  // Disable right chip (if single-side operation)
    10de:	a8 e3       	ldi	r26, 0x38	; 56
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e8 e3       	ldi	r30, 0x38	; 56
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	80 61       	ori	r24, 0x10	; 16
    10ea:	8c 93       	st	X, r24

    // Set control lines for data mode
    GLCD_CTRL_PORT |= (1 << GLCD_DI);  // DI = 1 (Data mode)
    10ec:	a8 e3       	ldi	r26, 0x38	; 56
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e8 e3       	ldi	r30, 0x38	; 56
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	81 60       	ori	r24, 0x01	; 1
    10f8:	8c 93       	st	X, r24
    GLCD_CTRL_PORT &= ~(1 << GLCD_RW); // RW = 0 (Write mode)
    10fa:	a8 e3       	ldi	r26, 0x38	; 56
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e8 e3       	ldi	r30, 0x38	; 56
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	8d 7f       	andi	r24, 0xFD	; 253
    1106:	8c 93       	st	X, r24

    // Write the data to the data port
    GLCD_DATA_PORT = data;
    1108:	eb e3       	ldi	r30, 0x3B	; 59
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	89 8d       	ldd	r24, Y+25	; 0x19
    110e:	80 83       	st	Z, r24

    // Generate enable pulse
    GLCD_CTRL_PORT |= (1 << GLCD_EN);  // EN = 1
    1110:	a8 e3       	ldi	r26, 0x38	; 56
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e8 e3       	ldi	r30, 0x38	; 56
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	84 60       	ori	r24, 0x04	; 4
    111c:	8c 93       	st	X, r24
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	a0 e8       	ldi	r26, 0x80	; 128
    1124:	bf e3       	ldi	r27, 0x3F	; 63
    1126:	8d 8b       	std	Y+21, r24	; 0x15
    1128:	9e 8b       	std	Y+22, r25	; 0x16
    112a:	af 8b       	std	Y+23, r26	; 0x17
    112c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    112e:	6d 89       	ldd	r22, Y+21	; 0x15
    1130:	7e 89       	ldd	r23, Y+22	; 0x16
    1132:	8f 89       	ldd	r24, Y+23	; 0x17
    1134:	98 8d       	ldd	r25, Y+24	; 0x18
    1136:	2b ea       	ldi	r18, 0xAB	; 171
    1138:	3a ea       	ldi	r19, 0xAA	; 170
    113a:	4a ea       	ldi	r20, 0xAA	; 170
    113c:	50 e4       	ldi	r21, 0x40	; 64
    113e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	89 8b       	std	Y+17, r24	; 0x11
    1148:	9a 8b       	std	Y+18, r25	; 0x12
    114a:	ab 8b       	std	Y+19, r26	; 0x13
    114c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    114e:	69 89       	ldd	r22, Y+17	; 0x11
    1150:	7a 89       	ldd	r23, Y+18	; 0x12
    1152:	8b 89       	ldd	r24, Y+19	; 0x13
    1154:	9c 89       	ldd	r25, Y+20	; 0x14
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e8       	ldi	r20, 0x80	; 128
    115c:	5f e3       	ldi	r21, 0x3F	; 63
    115e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__ltsf2>
    1162:	88 23       	and	r24, r24
    1164:	1c f4       	brge	.+6      	; 0x116c <GLCD_WriteData+0xb2>
		__ticks = 1;
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	88 8b       	std	Y+16, r24	; 0x10
    116a:	91 c0       	rjmp	.+290    	; 0x128e <GLCD_WriteData+0x1d4>
	else if (__tmp > 255)
    116c:	69 89       	ldd	r22, Y+17	; 0x11
    116e:	7a 89       	ldd	r23, Y+18	; 0x12
    1170:	8b 89       	ldd	r24, Y+19	; 0x13
    1172:	9c 89       	ldd	r25, Y+20	; 0x14
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	4f e7       	ldi	r20, 0x7F	; 127
    117a:	53 e4       	ldi	r21, 0x43	; 67
    117c:	0e 94 10 04 	call	0x820	; 0x820 <__gtsf2>
    1180:	18 16       	cp	r1, r24
    1182:	0c f0       	brlt	.+2      	; 0x1186 <GLCD_WriteData+0xcc>
    1184:	7b c0       	rjmp	.+246    	; 0x127c <GLCD_WriteData+0x1c2>
	{
		_delay_ms(__us / 1000.0);
    1186:	6d 89       	ldd	r22, Y+21	; 0x15
    1188:	7e 89       	ldd	r23, Y+22	; 0x16
    118a:	8f 89       	ldd	r24, Y+23	; 0x17
    118c:	98 8d       	ldd	r25, Y+24	; 0x18
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	4a e7       	ldi	r20, 0x7A	; 122
    1194:	54 e4       	ldi	r21, 0x44	; 68
    1196:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__divsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	8c 87       	std	Y+12, r24	; 0x0c
    11a0:	9d 87       	std	Y+13, r25	; 0x0d
    11a2:	ae 87       	std	Y+14, r26	; 0x0e
    11a4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a6:	6c 85       	ldd	r22, Y+12	; 0x0c
    11a8:	7d 85       	ldd	r23, Y+13	; 0x0d
    11aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    11ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	4a e7       	ldi	r20, 0x7A	; 122
    11b4:	55 e4       	ldi	r21, 0x45	; 69
    11b6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	88 87       	std	Y+8, r24	; 0x08
    11c0:	99 87       	std	Y+9, r25	; 0x09
    11c2:	aa 87       	std	Y+10, r26	; 0x0a
    11c4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    11c6:	68 85       	ldd	r22, Y+8	; 0x08
    11c8:	79 85       	ldd	r23, Y+9	; 0x09
    11ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    11cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e8       	ldi	r20, 0x80	; 128
    11d4:	5f e3       	ldi	r21, 0x3F	; 63
    11d6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__ltsf2>
    11da:	88 23       	and	r24, r24
    11dc:	2c f4       	brge	.+10     	; 0x11e8 <GLCD_WriteData+0x12e>
		__ticks = 1;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	9f 83       	std	Y+7, r25	; 0x07
    11e4:	8e 83       	std	Y+6, r24	; 0x06
    11e6:	3f c0       	rjmp	.+126    	; 0x1266 <GLCD_WriteData+0x1ac>
	else if (__tmp > 65535)
    11e8:	68 85       	ldd	r22, Y+8	; 0x08
    11ea:	79 85       	ldd	r23, Y+9	; 0x09
    11ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	3f ef       	ldi	r19, 0xFF	; 255
    11f4:	4f e7       	ldi	r20, 0x7F	; 127
    11f6:	57 e4       	ldi	r21, 0x47	; 71
    11f8:	0e 94 10 04 	call	0x820	; 0x820 <__gtsf2>
    11fc:	18 16       	cp	r1, r24
    11fe:	4c f5       	brge	.+82     	; 0x1252 <GLCD_WriteData+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1200:	6c 85       	ldd	r22, Y+12	; 0x0c
    1202:	7d 85       	ldd	r23, Y+13	; 0x0d
    1204:	8e 85       	ldd	r24, Y+14	; 0x0e
    1206:	9f 85       	ldd	r25, Y+15	; 0x0f
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e2       	ldi	r20, 0x20	; 32
    120e:	51 e4       	ldi	r21, 0x41	; 65
    1210:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	bc 01       	movw	r22, r24
    121a:	cd 01       	movw	r24, r26
    121c:	0e 94 94 00 	call	0x128	; 0x128 <__fixunssfsi>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	9f 83       	std	Y+7, r25	; 0x07
    1226:	8e 83       	std	Y+6, r24	; 0x06
    1228:	0f c0       	rjmp	.+30     	; 0x1248 <GLCD_WriteData+0x18e>
    122a:	80 e9       	ldi	r24, 0x90	; 144
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	9d 83       	std	Y+5, r25	; 0x05
    1230:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	9d 81       	ldd	r25, Y+5	; 0x05
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	f1 f7       	brne	.-4      	; 0x1236 <GLCD_WriteData+0x17c>
    123a:	9d 83       	std	Y+5, r25	; 0x05
    123c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    123e:	8e 81       	ldd	r24, Y+6	; 0x06
    1240:	9f 81       	ldd	r25, Y+7	; 0x07
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	9f 83       	std	Y+7, r25	; 0x07
    1246:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1248:	8e 81       	ldd	r24, Y+6	; 0x06
    124a:	9f 81       	ldd	r25, Y+7	; 0x07
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	69 f7       	brne	.-38     	; 0x122a <GLCD_WriteData+0x170>
    1250:	24 c0       	rjmp	.+72     	; 0x129a <GLCD_WriteData+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1252:	68 85       	ldd	r22, Y+8	; 0x08
    1254:	79 85       	ldd	r23, Y+9	; 0x09
    1256:	8a 85       	ldd	r24, Y+10	; 0x0a
    1258:	9b 85       	ldd	r25, Y+11	; 0x0b
    125a:	0e 94 94 00 	call	0x128	; 0x128 <__fixunssfsi>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	9f 83       	std	Y+7, r25	; 0x07
    1264:	8e 83       	std	Y+6, r24	; 0x06
    1266:	8e 81       	ldd	r24, Y+6	; 0x06
    1268:	9f 81       	ldd	r25, Y+7	; 0x07
    126a:	9b 83       	std	Y+3, r25	; 0x03
    126c:	8a 83       	std	Y+2, r24	; 0x02
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	9b 81       	ldd	r25, Y+3	; 0x03
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	f1 f7       	brne	.-4      	; 0x1272 <GLCD_WriteData+0x1b8>
    1276:	9b 83       	std	Y+3, r25	; 0x03
    1278:	8a 83       	std	Y+2, r24	; 0x02
    127a:	0f c0       	rjmp	.+30     	; 0x129a <GLCD_WriteData+0x1e0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    127c:	69 89       	ldd	r22, Y+17	; 0x11
    127e:	7a 89       	ldd	r23, Y+18	; 0x12
    1280:	8b 89       	ldd	r24, Y+19	; 0x13
    1282:	9c 89       	ldd	r25, Y+20	; 0x14
    1284:	0e 94 94 00 	call	0x128	; 0x128 <__fixunssfsi>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	88 8b       	std	Y+16, r24	; 0x10
    128e:	88 89       	ldd	r24, Y+16	; 0x10
    1290:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	8a 95       	dec	r24
    1296:	f1 f7       	brne	.-4      	; 0x1294 <GLCD_WriteData+0x1da>
    1298:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);                      // Small delay
    GLCD_CTRL_PORT &= ~(1 << GLCD_EN); // EN = 0
    129a:	a8 e3       	ldi	r26, 0x38	; 56
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e8 e3       	ldi	r30, 0x38	; 56
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	8b 7f       	andi	r24, 0xFB	; 251
    12a6:	8c 93       	st	X, r24

    // Deselect chips
    GLCD_CTRL_PORT |= (1 << GLCD_CS1) | (1 << GLCD_CS2);
    12a8:	a8 e3       	ldi	r26, 0x38	; 56
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e8 e3       	ldi	r30, 0x38	; 56
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	88 61       	ori	r24, 0x18	; 24
    12b4:	8c 93       	st	X, r24
}
    12b6:	69 96       	adiw	r28, 0x19	; 25
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <GLCD_SetPage>:

// Set the page (row) on the GLCD
void GLCD_SetPage(uint8_t page, uint8_t chip)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <GLCD_SetPage+0x6>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	6a 83       	std	Y+2, r22	; 0x02
    GLCD_WriteCommand(0xB8 | page, chip); // Set page address command
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	88 6b       	ori	r24, 0xB8	; 184
    12da:	6a 81       	ldd	r22, Y+2	; 0x02
    12dc:	0e 94 40 07 	call	0xe80	; 0xe80 <GLCD_WriteCommand>
}
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <GLCD_SetColumn>:

// Set the column (position) on the GLCD
void GLCD_SetColumn(uint8_t column, uint8_t chip)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <GLCD_SetColumn+0x6>
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	6a 83       	std	Y+2, r22	; 0x02
    GLCD_WriteCommand(0x40 | column, chip); // Set column address command
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	80 64       	ori	r24, 0x40	; 64
    12fc:	6a 81       	ldd	r22, Y+2	; 0x02
    12fe:	0e 94 40 07 	call	0xe80	; 0xe80 <GLCD_WriteCommand>
}
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <GLCD_GoTo>:

void GLCD_GoTo(uint8_t x, uint8_t y)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <GLCD_GoTo+0x6>
    1312:	0f 92       	push	r0
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	8a 83       	std	Y+2, r24	; 0x02
    131a:	6b 83       	std	Y+3, r22	; 0x03
    uint8_t chip = 0;
    131c:	19 82       	std	Y+1, r1	; 0x01

    // Determine which chip to use based on the X coordinate
    if (x >= 64)
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	80 34       	cpi	r24, 0x40	; 64
    1322:	30 f0       	brcs	.+12     	; 0x1330 <GLCD_GoTo+0x24>
    {
        chip = 1;  // Use the right chip
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	89 83       	std	Y+1, r24	; 0x01
        x -= 64;  // Adjust X coordinate for the right chip
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	80 54       	subi	r24, 0x40	; 64
    132c:	8a 83       	std	Y+2, r24	; 0x02
    132e:	01 c0       	rjmp	.+2      	; 0x1332 <GLCD_GoTo+0x26>
    }
    else
    {
        chip = 0;  // Use the left chip
    1330:	19 82       	std	Y+1, r1	; 0x01
    }

    // Set the page (Y) and column (X) for the selected chip
    GLCD_SetPage(y, chip);
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	69 81       	ldd	r22, Y+1	; 0x01
    1336:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GLCD_SetPage>
    GLCD_SetColumn(x, chip);
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	69 81       	ldd	r22, Y+1	; 0x01
    133e:	0e 94 75 09 	call	0x12ea	; 0x12ea <GLCD_SetColumn>
}
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <GLCD_WriteChar>:

void GLCD_WriteChar(char character)
{
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	27 97       	sbiw	r28, 0x07	; 7
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	8f 83       	std	Y+7, r24	; 0x07
    if (character < 32 || character > 126)
    1364:	8f 81       	ldd	r24, Y+7	; 0x07
    1366:	80 32       	cpi	r24, 0x20	; 32
    1368:	78 f1       	brcs	.+94     	; 0x13c8 <GLCD_WriteChar+0x7a>
    136a:	8f 81       	ldd	r24, Y+7	; 0x07
    136c:	8f 37       	cpi	r24, 0x7F	; 127
    136e:	60 f5       	brcc	.+88     	; 0x13c8 <GLCD_WriteChar+0x7a>
        return; // Ignore characters outside the font table

    // Get the font data for the character
    uint8_t index = character - 32; // Adjust for ASCII offset
    1370:	8f 81       	ldd	r24, Y+7	; 0x07
    1372:	80 52       	subi	r24, 0x20	; 32
    1374:	8e 83       	std	Y+6, r24	; 0x06
    for (uint8_t i = 0; i < 5; i++)
    1376:	1d 82       	std	Y+5, r1	; 0x05
    1378:	21 c0       	rjmp	.+66     	; 0x13bc <GLCD_WriteChar+0x6e>
    {
        uint8_t column = pgm_read_byte(&font5x8[index][i]); // Read font data from program memory
    137a:	44 e5       	ldi	r20, 0x54	; 84
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	8e 81       	ldd	r24, Y+6	; 0x06
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	c9 01       	movw	r24, r18
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	28 0f       	add	r18, r24
    1390:	39 1f       	adc	r19, r25
    1392:	8d 81       	ldd	r24, Y+5	; 0x05
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	82 0f       	add	r24, r18
    139a:	93 1f       	adc	r25, r19
    139c:	84 0f       	add	r24, r20
    139e:	95 1f       	adc	r25, r21
    13a0:	9b 83       	std	Y+3, r25	; 0x03
    13a2:	8a 83       	std	Y+2, r24	; 0x02
    13a4:	ea 81       	ldd	r30, Y+2	; 0x02
    13a6:	fb 81       	ldd	r31, Y+3	; 0x03
    13a8:	84 91       	lpm	r24, Z+
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	8c 83       	std	Y+4, r24	; 0x04
        GLCD_WriteData(column); // Write column data to GLCD
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	0e 94 5d 08 	call	0x10ba	; 0x10ba <GLCD_WriteData>
    if (character < 32 || character > 126)
        return; // Ignore characters outside the font table

    // Get the font data for the character
    uint8_t index = character - 32; // Adjust for ASCII offset
    for (uint8_t i = 0; i < 5; i++)
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	8f 5f       	subi	r24, 0xFF	; 255
    13ba:	8d 83       	std	Y+5, r24	; 0x05
    13bc:	8d 81       	ldd	r24, Y+5	; 0x05
    13be:	85 30       	cpi	r24, 0x05	; 5
    13c0:	e0 f2       	brcs	.-72     	; 0x137a <GLCD_WriteChar+0x2c>
        uint8_t column = pgm_read_byte(&font5x8[index][i]); // Read font data from program memory
        GLCD_WriteData(column); // Write column data to GLCD
    }

    // Add a 1-column space after each character
    GLCD_WriteData(0x00);
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	0e 94 5d 08 	call	0x10ba	; 0x10ba <GLCD_WriteData>
}
    13c8:	27 96       	adiw	r28, 0x07	; 7
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <GLCD_WriteString>:


void GLCD_WriteString(const char *str)
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <GLCD_WriteString+0x6>
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	9a 83       	std	Y+2, r25	; 0x02
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	0a c0       	rjmp	.+20     	; 0x13fe <GLCD_WriteString+0x24>
    while (*str)
    {
        GLCD_WriteChar(*str); // Write each character
    13ea:	e9 81       	ldd	r30, Y+1	; 0x01
    13ec:	fa 81       	ldd	r31, Y+2	; 0x02
    13ee:	80 81       	ld	r24, Z
    13f0:	0e 94 a7 09 	call	0x134e	; 0x134e <GLCD_WriteChar>
        str++; // Move to the next character
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	9a 83       	std	Y+2, r25	; 0x02
    13fc:	89 83       	std	Y+1, r24	; 0x01
}


void GLCD_WriteString(const char *str)
{
    while (*str)
    13fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1400:	fa 81       	ldd	r31, Y+2	; 0x02
    1402:	80 81       	ld	r24, Z
    1404:	88 23       	and	r24, r24
    1406:	89 f7       	brne	.-30     	; 0x13ea <GLCD_WriteString+0x10>
    {
        GLCD_WriteChar(*str); // Write each character
        str++; // Move to the next character
    }
}
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <GLCD_Clear>:

void GLCD_Clear(void)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	00 d0       	rcall	.+0      	; 0x1418 <GLCD_Clear+0x6>
    1418:	0f 92       	push	r0
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    for (uint8_t page = 0; page < 8; page++) // Iterate through all pages (rows)
    141e:	1b 82       	std	Y+3, r1	; 0x03
    1420:	29 c0       	rjmp	.+82     	; 0x1474 <GLCD_Clear+0x62>
    {
        GLCD_SetPage(page, 0); // Set the page on the left chip
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GLCD_SetPage>
        GLCD_SetColumn(0, 0); // Set column to 0 on the left chip
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	0e 94 75 09 	call	0x12ea	; 0x12ea <GLCD_SetColumn>

        for (uint8_t column = 0; column < 64; column++) // Clear all 64 columns on left chip
    1432:	1a 82       	std	Y+2, r1	; 0x02
    1434:	06 c0       	rjmp	.+12     	; 0x1442 <GLCD_Clear+0x30>
        {
            GLCD_WriteData(0x00);
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	0e 94 5d 08 	call	0x10ba	; 0x10ba <GLCD_WriteData>
    for (uint8_t page = 0; page < 8; page++) // Iterate through all pages (rows)
    {
        GLCD_SetPage(page, 0); // Set the page on the left chip
        GLCD_SetColumn(0, 0); // Set column to 0 on the left chip

        for (uint8_t column = 0; column < 64; column++) // Clear all 64 columns on left chip
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	8f 5f       	subi	r24, 0xFF	; 255
    1440:	8a 83       	std	Y+2, r24	; 0x02
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	80 34       	cpi	r24, 0x40	; 64
    1446:	b8 f3       	brcs	.-18     	; 0x1436 <GLCD_Clear+0x24>
        {
            GLCD_WriteData(0x00);
        }

        GLCD_SetPage(page, 1); // Set the page on the right chip
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	61 e0       	ldi	r22, 0x01	; 1
    144c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GLCD_SetPage>
        GLCD_SetColumn(0, 1); // Set column to 0 on the right chip
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	61 e0       	ldi	r22, 0x01	; 1
    1454:	0e 94 75 09 	call	0x12ea	; 0x12ea <GLCD_SetColumn>

        for (uint8_t column = 0; column < 64; column++) // Clear all 64 columns on right chip
    1458:	19 82       	std	Y+1, r1	; 0x01
    145a:	06 c0       	rjmp	.+12     	; 0x1468 <GLCD_Clear+0x56>
        {
            GLCD_WriteData(0x00);
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <GLCD_WriteData>
        }

        GLCD_SetPage(page, 1); // Set the page on the right chip
        GLCD_SetColumn(0, 1); // Set column to 0 on the right chip

        for (uint8_t column = 0; column < 64; column++) // Clear all 64 columns on right chip
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	8f 5f       	subi	r24, 0xFF	; 255
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	80 34       	cpi	r24, 0x40	; 64
    146c:	b8 f3       	brcs	.-18     	; 0x145c <GLCD_Clear+0x4a>
    }
}

void GLCD_Clear(void)
{
    for (uint8_t page = 0; page < 8; page++) // Iterate through all pages (rows)
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	8b 83       	std	Y+3, r24	; 0x03
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	88 30       	cpi	r24, 0x08	; 8
    1478:	a0 f2       	brcs	.-88     	; 0x1422 <GLCD_Clear+0x10>
        for (uint8_t column = 0; column < 64; column++) // Clear all 64 columns on right chip
        {
            GLCD_WriteData(0x00);
        }
    }
}
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <GLCD_ClearScreen>:

// Clear the GLCD screen
void GLCD_ClearScreen(void)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	00 d0       	rcall	.+0      	; 0x148c <GLCD_ClearScreen+0x6>
    148c:	0f 92       	push	r0
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    for (uint8_t page = 0; page < 8; page++) // Loop through all 8 pages
    1492:	1b 82       	std	Y+3, r1	; 0x03
    1494:	29 c0       	rjmp	.+82     	; 0x14e8 <GLCD_ClearScreen+0x62>
    {
        GLCD_SetPage(page, 0); // Set page on left chip
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GLCD_SetPage>
        GLCD_SetColumn(0, 0); // Start at column 0 on left chip
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	0e 94 75 09 	call	0x12ea	; 0x12ea <GLCD_SetColumn>
        for (uint8_t i = 0; i < 64; i++) // Clear 64 columns on the left chip
    14a6:	1a 82       	std	Y+2, r1	; 0x02
    14a8:	06 c0       	rjmp	.+12     	; 0x14b6 <GLCD_ClearScreen+0x30>
        {
            GLCD_WriteData(0x00);
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	0e 94 5d 08 	call	0x10ba	; 0x10ba <GLCD_WriteData>
{
    for (uint8_t page = 0; page < 8; page++) // Loop through all 8 pages
    {
        GLCD_SetPage(page, 0); // Set page on left chip
        GLCD_SetColumn(0, 0); // Start at column 0 on left chip
        for (uint8_t i = 0; i < 64; i++) // Clear 64 columns on the left chip
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	8f 5f       	subi	r24, 0xFF	; 255
    14b4:	8a 83       	std	Y+2, r24	; 0x02
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	80 34       	cpi	r24, 0x40	; 64
    14ba:	b8 f3       	brcs	.-18     	; 0x14aa <GLCD_ClearScreen+0x24>
        {
            GLCD_WriteData(0x00);
        }

        GLCD_SetPage(page, 1); // Set page on right chip
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	61 e0       	ldi	r22, 0x01	; 1
    14c0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GLCD_SetPage>
        GLCD_SetColumn(0, 1); // Start at column 0 on right chip
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	61 e0       	ldi	r22, 0x01	; 1
    14c8:	0e 94 75 09 	call	0x12ea	; 0x12ea <GLCD_SetColumn>
        for (uint8_t i = 0; i < 64; i++) // Clear 64 columns on the right chip
    14cc:	19 82       	std	Y+1, r1	; 0x01
    14ce:	06 c0       	rjmp	.+12     	; 0x14dc <GLCD_ClearScreen+0x56>
        {
            GLCD_WriteData(0x00);
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	0e 94 5d 08 	call	0x10ba	; 0x10ba <GLCD_WriteData>
            GLCD_WriteData(0x00);
        }

        GLCD_SetPage(page, 1); // Set page on right chip
        GLCD_SetColumn(0, 1); // Start at column 0 on right chip
        for (uint8_t i = 0; i < 64; i++) // Clear 64 columns on the right chip
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	8f 5f       	subi	r24, 0xFF	; 255
    14da:	89 83       	std	Y+1, r24	; 0x01
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	80 34       	cpi	r24, 0x40	; 64
    14e0:	b8 f3       	brcs	.-18     	; 0x14d0 <GLCD_ClearScreen+0x4a>
}

// Clear the GLCD screen
void GLCD_ClearScreen(void)
{
    for (uint8_t page = 0; page < 8; page++) // Loop through all 8 pages
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	8f 5f       	subi	r24, 0xFF	; 255
    14e6:	8b 83       	std	Y+3, r24	; 0x03
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	88 30       	cpi	r24, 0x08	; 8
    14ec:	a0 f2       	brcs	.-88     	; 0x1496 <GLCD_ClearScreen+0x10>
        for (uint8_t i = 0; i < 64; i++) // Clear 64 columns on the right chip
        {
            GLCD_WriteData(0x00);
        }
    }
}
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <PWM_Init>:

#include <avr/io.h>

// Initialize Timer1 for Fast PWM
void PWM_Init(void)
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    DDRD |= (1 << PD5); // Set OC1A (PD5) as output
    1502:	a1 e3       	ldi	r26, 0x31	; 49
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e1 e3       	ldi	r30, 0x31	; 49
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	80 62       	ori	r24, 0x20	; 32
    150e:	8c 93       	st	X, r24
    TCCR1A = (1 << WGM11) | (1 << COM1A1); // Fast PWM, non-inverting mode
    1510:	ef e4       	ldi	r30, 0x4F	; 79
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	82 e8       	ldi	r24, 0x82	; 130
    1516:	80 83       	st	Z, r24
    TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Prescaler = 8
    1518:	ee e4       	ldi	r30, 0x4E	; 78
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	8a e1       	ldi	r24, 0x1A	; 26
    151e:	80 83       	st	Z, r24
    ICR1 = 19999; // Set TOP value for 20ms period (50Hz)
    1520:	e6 e4       	ldi	r30, 0x46	; 70
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	8f e1       	ldi	r24, 0x1F	; 31
    1526:	9e e4       	ldi	r25, 0x4E	; 78
    1528:	91 83       	std	Z+1, r25	; 0x01
    152a:	80 83       	st	Z, r24
}
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <PWM_SetDutyCycle>:

// Set PWM duty cycle
void PWM_SetDutyCycle(uint8_t duty_cycle)
{
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	0f 92       	push	r0
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	89 83       	std	Y+1, r24	; 0x01
    if (duty_cycle > 100) duty_cycle = 100; // Limit duty cycle to 100%
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	85 36       	cpi	r24, 0x65	; 101
    1546:	10 f0       	brcs	.+4      	; 0x154c <PWM_SetDutyCycle+0x1a>
    1548:	84 e6       	ldi	r24, 0x64	; 100
    154a:	89 83       	std	Y+1, r24	; 0x01
    OCR1A = (duty_cycle * ICR1) / 100; // Set compare match value
    154c:	0a e4       	ldi	r16, 0x4A	; 74
    154e:	10 e0       	ldi	r17, 0x00	; 0
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	e6 e4       	ldi	r30, 0x46	; 70
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	91 81       	ldd	r25, Z+1	; 0x01
    155e:	ac 01       	movw	r20, r24
    1560:	24 9f       	mul	r18, r20
    1562:	c0 01       	movw	r24, r0
    1564:	25 9f       	mul	r18, r21
    1566:	90 0d       	add	r25, r0
    1568:	34 9f       	mul	r19, r20
    156a:	90 0d       	add	r25, r0
    156c:	11 24       	eor	r1, r1
    156e:	24 e6       	ldi	r18, 0x64	; 100
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	b9 01       	movw	r22, r18
    1574:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__udivmodhi4>
    1578:	cb 01       	movw	r24, r22
    157a:	f8 01       	movw	r30, r16
    157c:	91 83       	std	Z+1, r25	; 0x01
    157e:	80 83       	st	Z, r24
}
    1580:	0f 90       	pop	r0
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	08 95       	ret

0000158c <GLCD_Init>:
#include <util/delay.h>
#include "KS0108.h"  // External library for GLCD (add this to your project)

// Initialize GLCD
void GLCD_Init(void)
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    GLCD_Initialize();  // Initialize KS0108 GLCD
    1594:	0e 94 9a 06 	call	0xd34	; 0xd34 <GLCD_Initialize>
    GLCD_ClearScreen(); // Clear GLCD screen
    1598:	0e 94 43 0a 	call	0x1486	; 0x1486 <GLCD_ClearScreen>
}
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <GLCD_DrawBar>:
    GLCD_ClearScreen();
}
*/
// Draw a bar representing the PWM duty cycle
void GLCD_DrawBar(uint8_t duty_cycle)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	63 97       	sbiw	r28, 0x13	; 19
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	8b 8b       	std	Y+19, r24	; 0x13
    char buffer[16];
    uint8_t bar_length = (duty_cycle * 128) / 100; // Map duty cycle to screen width (128px)
    15b8:	8b 89       	ldd	r24, Y+19	; 0x13
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	96 95       	lsr	r25
    15c0:	98 2f       	mov	r25, r24
    15c2:	88 27       	eor	r24, r24
    15c4:	97 95       	ror	r25
    15c6:	87 95       	ror	r24
    15c8:	24 e6       	ldi	r18, 0x64	; 100
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	b9 01       	movw	r22, r18
    15ce:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__divmodhi4>
    15d2:	cb 01       	movw	r24, r22
    15d4:	8a 83       	std	Y+2, r24	; 0x02

    // Draw the bar
    for (uint8_t i = 0; i < bar_length; i++)
    15d6:	19 82       	std	Y+1, r1	; 0x01
    15d8:	06 c0       	rjmp	.+12     	; 0x15e6 <GLCD_DrawBar+0x44>
    {
        GLCD_WriteData(0xFF); // Fill the bar
    15da:	8f ef       	ldi	r24, 0xFF	; 255
    15dc:	0e 94 5d 08 	call	0x10ba	; 0x10ba <GLCD_WriteData>
{
    char buffer[16];
    uint8_t bar_length = (duty_cycle * 128) / 100; // Map duty cycle to screen width (128px)

    // Draw the bar
    for (uint8_t i = 0; i < bar_length; i++)
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	99 81       	ldd	r25, Y+1	; 0x01
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	98 17       	cp	r25, r24
    15ec:	b0 f3       	brcs	.-20     	; 0x15da <GLCD_DrawBar+0x38>
    {
        GLCD_WriteData(0xFF); // Fill the bar
    }

    // Display text
    sprintf(buffer, "Duty: %d%%", duty_cycle);
    15ee:	8b 89       	ldd	r24, Y+19	; 0x13
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <GLCD_DrawBar+0x54>
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <GLCD_DrawBar+0x56>
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <GLCD_DrawBar+0x58>
    15fa:	ed b7       	in	r30, 0x3d	; 61
    15fc:	fe b7       	in	r31, 0x3e	; 62
    15fe:	31 96       	adiw	r30, 0x01	; 1
    1600:	ce 01       	movw	r24, r28
    1602:	03 96       	adiw	r24, 0x03	; 3
    1604:	91 83       	std	Z+1, r25	; 0x01
    1606:	80 83       	st	Z, r24
    1608:	80 e6       	ldi	r24, 0x60	; 96
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	93 83       	std	Z+3, r25	; 0x03
    160e:	82 83       	std	Z+2, r24	; 0x02
    1610:	35 83       	std	Z+5, r19	; 0x05
    1612:	24 83       	std	Z+4, r18	; 0x04
    1614:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <sprintf>
    1618:	8d b7       	in	r24, 0x3d	; 61
    161a:	9e b7       	in	r25, 0x3e	; 62
    161c:	06 96       	adiw	r24, 0x06	; 6
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	9e bf       	out	0x3e, r25	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	8d bf       	out	0x3d, r24	; 61
    GLCD_GoTo(0, 1);
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	0e 94 86 09 	call	0x130c	; 0x130c <GLCD_GoTo>
    GLCD_WriteString(buffer);
    1630:	ce 01       	movw	r24, r28
    1632:	03 96       	adiw	r24, 0x03	; 3
    1634:	0e 94 ed 09 	call	0x13da	; 0x13da <GLCD_WriteString>
}
    1638:	63 96       	adiw	r28, 0x13	; 19
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	de bf       	out	0x3e, r29	; 62
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	cd bf       	out	0x3d, r28	; 61
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <main>:
// Define buttons
#define BTN_INC PA0
#define BTN_DEC PA1

int main(void)
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	ab 97       	sbiw	r28, 0x2b	; 43
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    uint8_t duty_cycle = 50; // Start with 50% duty cycle
    165e:	82 e3       	ldi	r24, 0x32	; 50
    1660:	8b a7       	std	Y+43, r24	; 0x2b

    // Initialize PWM, GLCD, and buttons
    PWM_Init();
    1662:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <PWM_Init>
    GLCD_Init();
    1666:	0e 94 c6 0a 	call	0x158c	; 0x158c <GLCD_Init>
    DDRA &= ~((1 << BTN_INC) | (1 << BTN_DEC)); // Set buttons as input
    166a:	aa e3       	ldi	r26, 0x3A	; 58
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	ea e3       	ldi	r30, 0x3A	; 58
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	8c 7f       	andi	r24, 0xFC	; 252
    1676:	8c 93       	st	X, r24
    PORTA |= (1 << BTN_INC) | (1 << BTN_DEC);  // Enable pull-up resistors
    1678:	ab e3       	ldi	r26, 0x3B	; 59
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	eb e3       	ldi	r30, 0x3B	; 59
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	83 60       	ori	r24, 0x03	; 3
    1684:	8c 93       	st	X, r24

    while (1)
    {
        // Check button states
        if (!(PINA & (1 << BTN_INC))) // Increase duty cycle
    1686:	e9 e3       	ldi	r30, 0x39	; 57
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	88 2f       	mov	r24, r24
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	81 70       	andi	r24, 0x01	; 1
    1692:	90 70       	andi	r25, 0x00	; 0
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	09 f0       	breq	.+2      	; 0x169a <main+0x50>
    1698:	79 c0       	rjmp	.+242    	; 0x178c <main+0x142>
        {
            if (duty_cycle < 100)
    169a:	8b a5       	ldd	r24, Y+43	; 0x2b
    169c:	84 36       	cpi	r24, 0x64	; 100
    169e:	08 f0       	brcs	.+2      	; 0x16a2 <main+0x58>
    16a0:	75 c0       	rjmp	.+234    	; 0x178c <main+0x142>
            {
                duty_cycle += 10;
    16a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    16a4:	86 5f       	subi	r24, 0xF6	; 246
    16a6:	8b a7       	std	Y+43, r24	; 0x2b
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	a8 e4       	ldi	r26, 0x48	; 72
    16ae:	b3 e4       	ldi	r27, 0x43	; 67
    16b0:	8f a3       	std	Y+39, r24	; 0x27
    16b2:	98 a7       	std	Y+40, r25	; 0x28
    16b4:	a9 a7       	std	Y+41, r26	; 0x29
    16b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b8:	6f a1       	ldd	r22, Y+39	; 0x27
    16ba:	78 a5       	ldd	r23, Y+40	; 0x28
    16bc:	89 a5       	ldd	r24, Y+41	; 0x29
    16be:	9a a5       	ldd	r25, Y+42	; 0x2a
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	4a e7       	ldi	r20, 0x7A	; 122
    16c6:	55 e4       	ldi	r21, 0x45	; 69
    16c8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	8b a3       	std	Y+35, r24	; 0x23
    16d2:	9c a3       	std	Y+36, r25	; 0x24
    16d4:	ad a3       	std	Y+37, r26	; 0x25
    16d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16d8:	6b a1       	ldd	r22, Y+35	; 0x23
    16da:	7c a1       	ldd	r23, Y+36	; 0x24
    16dc:	8d a1       	ldd	r24, Y+37	; 0x25
    16de:	9e a1       	ldd	r25, Y+38	; 0x26
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e8       	ldi	r20, 0x80	; 128
    16e6:	5f e3       	ldi	r21, 0x3F	; 63
    16e8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__ltsf2>
    16ec:	88 23       	and	r24, r24
    16ee:	2c f4       	brge	.+10     	; 0x16fa <main+0xb0>
		__ticks = 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	9a a3       	std	Y+34, r25	; 0x22
    16f6:	89 a3       	std	Y+33, r24	; 0x21
    16f8:	3f c0       	rjmp	.+126    	; 0x1778 <main+0x12e>
	else if (__tmp > 65535)
    16fa:	6b a1       	ldd	r22, Y+35	; 0x23
    16fc:	7c a1       	ldd	r23, Y+36	; 0x24
    16fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1700:	9e a1       	ldd	r25, Y+38	; 0x26
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	3f ef       	ldi	r19, 0xFF	; 255
    1706:	4f e7       	ldi	r20, 0x7F	; 127
    1708:	57 e4       	ldi	r21, 0x47	; 71
    170a:	0e 94 10 04 	call	0x820	; 0x820 <__gtsf2>
    170e:	18 16       	cp	r1, r24
    1710:	4c f5       	brge	.+82     	; 0x1764 <main+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1712:	6f a1       	ldd	r22, Y+39	; 0x27
    1714:	78 a5       	ldd	r23, Y+40	; 0x28
    1716:	89 a5       	ldd	r24, Y+41	; 0x29
    1718:	9a a5       	ldd	r25, Y+42	; 0x2a
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e2       	ldi	r20, 0x20	; 32
    1720:	51 e4       	ldi	r21, 0x41	; 65
    1722:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	0e 94 94 00 	call	0x128	; 0x128 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	9a a3       	std	Y+34, r25	; 0x22
    1738:	89 a3       	std	Y+33, r24	; 0x21
    173a:	0f c0       	rjmp	.+30     	; 0x175a <main+0x110>
    173c:	80 e9       	ldi	r24, 0x90	; 144
    173e:	91 e0       	ldi	r25, 0x01	; 1
    1740:	98 a3       	std	Y+32, r25	; 0x20
    1742:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1744:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1746:	98 a1       	ldd	r25, Y+32	; 0x20
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <main+0xfe>
    174c:	98 a3       	std	Y+32, r25	; 0x20
    174e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1750:	89 a1       	ldd	r24, Y+33	; 0x21
    1752:	9a a1       	ldd	r25, Y+34	; 0x22
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	9a a3       	std	Y+34, r25	; 0x22
    1758:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175a:	89 a1       	ldd	r24, Y+33	; 0x21
    175c:	9a a1       	ldd	r25, Y+34	; 0x22
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	69 f7       	brne	.-38     	; 0x173c <main+0xf2>
    1762:	14 c0       	rjmp	.+40     	; 0x178c <main+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1764:	6b a1       	ldd	r22, Y+35	; 0x23
    1766:	7c a1       	ldd	r23, Y+36	; 0x24
    1768:	8d a1       	ldd	r24, Y+37	; 0x25
    176a:	9e a1       	ldd	r25, Y+38	; 0x26
    176c:	0e 94 94 00 	call	0x128	; 0x128 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	9a a3       	std	Y+34, r25	; 0x22
    1776:	89 a3       	std	Y+33, r24	; 0x21
    1778:	89 a1       	ldd	r24, Y+33	; 0x21
    177a:	9a a1       	ldd	r25, Y+34	; 0x22
    177c:	9e 8f       	std	Y+30, r25	; 0x1e
    177e:	8d 8f       	std	Y+29, r24	; 0x1d
    1780:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1782:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <main+0x13a>
    1788:	9e 8f       	std	Y+30, r25	; 0x1e
    178a:	8d 8f       	std	Y+29, r24	; 0x1d
                _delay_ms(200); // Debounce delay
            }
        }
        if (!(PINA & (1 << BTN_DEC))) // Decrease duty cycle
    178c:	e9 e3       	ldi	r30, 0x39	; 57
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	82 70       	andi	r24, 0x02	; 2
    1798:	90 70       	andi	r25, 0x00	; 0
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	09 f0       	breq	.+2      	; 0x17a0 <main+0x156>
    179e:	79 c0       	rjmp	.+242    	; 0x1892 <main+0x248>
        {
            if (duty_cycle > 0)
    17a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    17a2:	88 23       	and	r24, r24
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <main+0x15e>
    17a6:	75 c0       	rjmp	.+234    	; 0x1892 <main+0x248>
            {
                duty_cycle -= 10;
    17a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    17aa:	8a 50       	subi	r24, 0x0A	; 10
    17ac:	8b a7       	std	Y+43, r24	; 0x2b
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	a8 e4       	ldi	r26, 0x48	; 72
    17b4:	b3 e4       	ldi	r27, 0x43	; 67
    17b6:	89 8f       	std	Y+25, r24	; 0x19
    17b8:	9a 8f       	std	Y+26, r25	; 0x1a
    17ba:	ab 8f       	std	Y+27, r26	; 0x1b
    17bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17be:	69 8d       	ldd	r22, Y+25	; 0x19
    17c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	4a e7       	ldi	r20, 0x7A	; 122
    17cc:	55 e4       	ldi	r21, 0x45	; 69
    17ce:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	8d 8b       	std	Y+21, r24	; 0x15
    17d8:	9e 8b       	std	Y+22, r25	; 0x16
    17da:	af 8b       	std	Y+23, r26	; 0x17
    17dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17de:	6d 89       	ldd	r22, Y+21	; 0x15
    17e0:	7e 89       	ldd	r23, Y+22	; 0x16
    17e2:	8f 89       	ldd	r24, Y+23	; 0x17
    17e4:	98 8d       	ldd	r25, Y+24	; 0x18
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e8       	ldi	r20, 0x80	; 128
    17ec:	5f e3       	ldi	r21, 0x3F	; 63
    17ee:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__ltsf2>
    17f2:	88 23       	and	r24, r24
    17f4:	2c f4       	brge	.+10     	; 0x1800 <main+0x1b6>
		__ticks = 1;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9c 8b       	std	Y+20, r25	; 0x14
    17fc:	8b 8b       	std	Y+19, r24	; 0x13
    17fe:	3f c0       	rjmp	.+126    	; 0x187e <main+0x234>
	else if (__tmp > 65535)
    1800:	6d 89       	ldd	r22, Y+21	; 0x15
    1802:	7e 89       	ldd	r23, Y+22	; 0x16
    1804:	8f 89       	ldd	r24, Y+23	; 0x17
    1806:	98 8d       	ldd	r25, Y+24	; 0x18
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	3f ef       	ldi	r19, 0xFF	; 255
    180c:	4f e7       	ldi	r20, 0x7F	; 127
    180e:	57 e4       	ldi	r21, 0x47	; 71
    1810:	0e 94 10 04 	call	0x820	; 0x820 <__gtsf2>
    1814:	18 16       	cp	r1, r24
    1816:	4c f5       	brge	.+82     	; 0x186a <main+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1818:	69 8d       	ldd	r22, Y+25	; 0x19
    181a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    181c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    181e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e2       	ldi	r20, 0x20	; 32
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	0e 94 94 00 	call	0x128	; 0x128 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9c 8b       	std	Y+20, r25	; 0x14
    183e:	8b 8b       	std	Y+19, r24	; 0x13
    1840:	0f c0       	rjmp	.+30     	; 0x1860 <main+0x216>
    1842:	80 e9       	ldi	r24, 0x90	; 144
    1844:	91 e0       	ldi	r25, 0x01	; 1
    1846:	9a 8b       	std	Y+18, r25	; 0x12
    1848:	89 8b       	std	Y+17, r24	; 0x11
    184a:	89 89       	ldd	r24, Y+17	; 0x11
    184c:	9a 89       	ldd	r25, Y+18	; 0x12
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <main+0x204>
    1852:	9a 8b       	std	Y+18, r25	; 0x12
    1854:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1856:	8b 89       	ldd	r24, Y+19	; 0x13
    1858:	9c 89       	ldd	r25, Y+20	; 0x14
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	9c 8b       	std	Y+20, r25	; 0x14
    185e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1860:	8b 89       	ldd	r24, Y+19	; 0x13
    1862:	9c 89       	ldd	r25, Y+20	; 0x14
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	69 f7       	brne	.-38     	; 0x1842 <main+0x1f8>
    1868:	14 c0       	rjmp	.+40     	; 0x1892 <main+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186a:	6d 89       	ldd	r22, Y+21	; 0x15
    186c:	7e 89       	ldd	r23, Y+22	; 0x16
    186e:	8f 89       	ldd	r24, Y+23	; 0x17
    1870:	98 8d       	ldd	r25, Y+24	; 0x18
    1872:	0e 94 94 00 	call	0x128	; 0x128 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	9c 8b       	std	Y+20, r25	; 0x14
    187c:	8b 8b       	std	Y+19, r24	; 0x13
    187e:	8b 89       	ldd	r24, Y+19	; 0x13
    1880:	9c 89       	ldd	r25, Y+20	; 0x14
    1882:	98 8b       	std	Y+16, r25	; 0x10
    1884:	8f 87       	std	Y+15, r24	; 0x0f
    1886:	8f 85       	ldd	r24, Y+15	; 0x0f
    1888:	98 89       	ldd	r25, Y+16	; 0x10
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <main+0x240>
    188e:	98 8b       	std	Y+16, r25	; 0x10
    1890:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(200); // Debounce delay
            }
        }

        // Update PWM duty cycle
        PWM_SetDutyCycle(duty_cycle);
    1892:	8b a5       	ldd	r24, Y+43	; 0x2b
    1894:	0e 94 99 0a 	call	0x1532	; 0x1532 <PWM_SetDutyCycle>

        // Clear GLCD and display duty cycle
        GLCD_Clear();
    1898:	0e 94 09 0a 	call	0x1412	; 0x1412 <GLCD_Clear>
        GLCD_DrawBar(duty_cycle); // Display a bar representing duty cycle
    189c:	8b a5       	ldd	r24, Y+43	; 0x2b
    189e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <GLCD_DrawBar>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a8 ec       	ldi	r26, 0xC8	; 200
    18a8:	b2 e4       	ldi	r27, 0x42	; 66
    18aa:	8b 87       	std	Y+11, r24	; 0x0b
    18ac:	9c 87       	std	Y+12, r25	; 0x0c
    18ae:	ad 87       	std	Y+13, r26	; 0x0d
    18b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	4a e7       	ldi	r20, 0x7A	; 122
    18c0:	55 e4       	ldi	r21, 0x45	; 69
    18c2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	8f 83       	std	Y+7, r24	; 0x07
    18cc:	98 87       	std	Y+8, r25	; 0x08
    18ce:	a9 87       	std	Y+9, r26	; 0x09
    18d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18d2:	6f 81       	ldd	r22, Y+7	; 0x07
    18d4:	78 85       	ldd	r23, Y+8	; 0x08
    18d6:	89 85       	ldd	r24, Y+9	; 0x09
    18d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e8       	ldi	r20, 0x80	; 128
    18e0:	5f e3       	ldi	r21, 0x3F	; 63
    18e2:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__ltsf2>
    18e6:	88 23       	and	r24, r24
    18e8:	2c f4       	brge	.+10     	; 0x18f4 <main+0x2aa>
		__ticks = 1;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	9e 83       	std	Y+6, r25	; 0x06
    18f0:	8d 83       	std	Y+5, r24	; 0x05
    18f2:	3f c0       	rjmp	.+126    	; 0x1972 <main+0x328>
	else if (__tmp > 65535)
    18f4:	6f 81       	ldd	r22, Y+7	; 0x07
    18f6:	78 85       	ldd	r23, Y+8	; 0x08
    18f8:	89 85       	ldd	r24, Y+9	; 0x09
    18fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	3f ef       	ldi	r19, 0xFF	; 255
    1900:	4f e7       	ldi	r20, 0x7F	; 127
    1902:	57 e4       	ldi	r21, 0x47	; 71
    1904:	0e 94 10 04 	call	0x820	; 0x820 <__gtsf2>
    1908:	18 16       	cp	r1, r24
    190a:	4c f5       	brge	.+82     	; 0x195e <main+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190c:	6b 85       	ldd	r22, Y+11	; 0x0b
    190e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1910:	8d 85       	ldd	r24, Y+13	; 0x0d
    1912:	9e 85       	ldd	r25, Y+14	; 0x0e
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e2       	ldi	r20, 0x20	; 32
    191a:	51 e4       	ldi	r21, 0x41	; 65
    191c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	bc 01       	movw	r22, r24
    1926:	cd 01       	movw	r24, r26
    1928:	0e 94 94 00 	call	0x128	; 0x128 <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	9e 83       	std	Y+6, r25	; 0x06
    1932:	8d 83       	std	Y+5, r24	; 0x05
    1934:	0f c0       	rjmp	.+30     	; 0x1954 <main+0x30a>
    1936:	80 e9       	ldi	r24, 0x90	; 144
    1938:	91 e0       	ldi	r25, 0x01	; 1
    193a:	9c 83       	std	Y+4, r25	; 0x04
    193c:	8b 83       	std	Y+3, r24	; 0x03
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	9c 81       	ldd	r25, Y+4	; 0x04
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <main+0x2f8>
    1946:	9c 83       	std	Y+4, r25	; 0x04
    1948:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194a:	8d 81       	ldd	r24, Y+5	; 0x05
    194c:	9e 81       	ldd	r25, Y+6	; 0x06
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	9e 83       	std	Y+6, r25	; 0x06
    1952:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1954:	8d 81       	ldd	r24, Y+5	; 0x05
    1956:	9e 81       	ldd	r25, Y+6	; 0x06
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	69 f7       	brne	.-38     	; 0x1936 <main+0x2ec>
    195c:	94 ce       	rjmp	.-728    	; 0x1686 <main+0x3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195e:	6f 81       	ldd	r22, Y+7	; 0x07
    1960:	78 85       	ldd	r23, Y+8	; 0x08
    1962:	89 85       	ldd	r24, Y+9	; 0x09
    1964:	9a 85       	ldd	r25, Y+10	; 0x0a
    1966:	0e 94 94 00 	call	0x128	; 0x128 <__fixunssfsi>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	9e 83       	std	Y+6, r25	; 0x06
    1970:	8d 83       	std	Y+5, r24	; 0x05
    1972:	8d 81       	ldd	r24, Y+5	; 0x05
    1974:	9e 81       	ldd	r25, Y+6	; 0x06
    1976:	9a 83       	std	Y+2, r25	; 0x02
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	9a 81       	ldd	r25, Y+2	; 0x02
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <main+0x334>
    1982:	9a 83       	std	Y+2, r25	; 0x02
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	7f ce       	rjmp	.-770    	; 0x1686 <main+0x3c>

00001988 <__udivmodhi4>:
    1988:	aa 1b       	sub	r26, r26
    198a:	bb 1b       	sub	r27, r27
    198c:	51 e1       	ldi	r21, 0x11	; 17
    198e:	07 c0       	rjmp	.+14     	; 0x199e <__udivmodhi4_ep>

00001990 <__udivmodhi4_loop>:
    1990:	aa 1f       	adc	r26, r26
    1992:	bb 1f       	adc	r27, r27
    1994:	a6 17       	cp	r26, r22
    1996:	b7 07       	cpc	r27, r23
    1998:	10 f0       	brcs	.+4      	; 0x199e <__udivmodhi4_ep>
    199a:	a6 1b       	sub	r26, r22
    199c:	b7 0b       	sbc	r27, r23

0000199e <__udivmodhi4_ep>:
    199e:	88 1f       	adc	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	5a 95       	dec	r21
    19a4:	a9 f7       	brne	.-22     	; 0x1990 <__udivmodhi4_loop>
    19a6:	80 95       	com	r24
    19a8:	90 95       	com	r25
    19aa:	bc 01       	movw	r22, r24
    19ac:	cd 01       	movw	r24, r26
    19ae:	08 95       	ret

000019b0 <__divmodhi4>:
    19b0:	97 fb       	bst	r25, 7
    19b2:	09 2e       	mov	r0, r25
    19b4:	07 26       	eor	r0, r23
    19b6:	0a d0       	rcall	.+20     	; 0x19cc <__divmodhi4_neg1>
    19b8:	77 fd       	sbrc	r23, 7
    19ba:	04 d0       	rcall	.+8      	; 0x19c4 <__divmodhi4_neg2>
    19bc:	e5 df       	rcall	.-54     	; 0x1988 <__udivmodhi4>
    19be:	06 d0       	rcall	.+12     	; 0x19cc <__divmodhi4_neg1>
    19c0:	00 20       	and	r0, r0
    19c2:	1a f4       	brpl	.+6      	; 0x19ca <__divmodhi4_exit>

000019c4 <__divmodhi4_neg2>:
    19c4:	70 95       	com	r23
    19c6:	61 95       	neg	r22
    19c8:	7f 4f       	sbci	r23, 0xFF	; 255

000019ca <__divmodhi4_exit>:
    19ca:	08 95       	ret

000019cc <__divmodhi4_neg1>:
    19cc:	f6 f7       	brtc	.-4      	; 0x19ca <__divmodhi4_exit>
    19ce:	90 95       	com	r25
    19d0:	81 95       	neg	r24
    19d2:	9f 4f       	sbci	r25, 0xFF	; 255
    19d4:	08 95       	ret

000019d6 <__prologue_saves__>:
    19d6:	2f 92       	push	r2
    19d8:	3f 92       	push	r3
    19da:	4f 92       	push	r4
    19dc:	5f 92       	push	r5
    19de:	6f 92       	push	r6
    19e0:	7f 92       	push	r7
    19e2:	8f 92       	push	r8
    19e4:	9f 92       	push	r9
    19e6:	af 92       	push	r10
    19e8:	bf 92       	push	r11
    19ea:	cf 92       	push	r12
    19ec:	df 92       	push	r13
    19ee:	ef 92       	push	r14
    19f0:	ff 92       	push	r15
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	ca 1b       	sub	r28, r26
    1a00:	db 0b       	sbc	r29, r27
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	09 94       	ijmp

00001a0e <__epilogue_restores__>:
    1a0e:	2a 88       	ldd	r2, Y+18	; 0x12
    1a10:	39 88       	ldd	r3, Y+17	; 0x11
    1a12:	48 88       	ldd	r4, Y+16	; 0x10
    1a14:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a16:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a18:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a20:	b9 84       	ldd	r11, Y+9	; 0x09
    1a22:	c8 84       	ldd	r12, Y+8	; 0x08
    1a24:	df 80       	ldd	r13, Y+7	; 0x07
    1a26:	ee 80       	ldd	r14, Y+6	; 0x06
    1a28:	fd 80       	ldd	r15, Y+5	; 0x05
    1a2a:	0c 81       	ldd	r16, Y+4	; 0x04
    1a2c:	1b 81       	ldd	r17, Y+3	; 0x03
    1a2e:	aa 81       	ldd	r26, Y+2	; 0x02
    1a30:	b9 81       	ldd	r27, Y+1	; 0x01
    1a32:	ce 0f       	add	r28, r30
    1a34:	d1 1d       	adc	r29, r1
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	ed 01       	movw	r28, r26
    1a42:	08 95       	ret

00001a44 <sprintf>:
    1a44:	ae e0       	ldi	r26, 0x0E	; 14
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e8 e2       	ldi	r30, 0x28	; 40
    1a4a:	fd e0       	ldi	r31, 0x0D	; 13
    1a4c:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__prologue_saves__+0x1c>
    1a50:	0d 89       	ldd	r16, Y+21	; 0x15
    1a52:	1e 89       	ldd	r17, Y+22	; 0x16
    1a54:	86 e0       	ldi	r24, 0x06	; 6
    1a56:	8c 83       	std	Y+4, r24	; 0x04
    1a58:	1a 83       	std	Y+2, r17	; 0x02
    1a5a:	09 83       	std	Y+1, r16	; 0x01
    1a5c:	8f ef       	ldi	r24, 0xFF	; 255
    1a5e:	9f e7       	ldi	r25, 0x7F	; 127
    1a60:	9e 83       	std	Y+6, r25	; 0x06
    1a62:	8d 83       	std	Y+5, r24	; 0x05
    1a64:	9e 01       	movw	r18, r28
    1a66:	27 5e       	subi	r18, 0xE7	; 231
    1a68:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	6f 89       	ldd	r22, Y+23	; 0x17
    1a70:	78 8d       	ldd	r23, Y+24	; 0x18
    1a72:	a9 01       	movw	r20, r18
    1a74:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <vfprintf>
    1a78:	2f 81       	ldd	r18, Y+7	; 0x07
    1a7a:	38 85       	ldd	r19, Y+8	; 0x08
    1a7c:	02 0f       	add	r16, r18
    1a7e:	13 1f       	adc	r17, r19
    1a80:	f8 01       	movw	r30, r16
    1a82:	10 82       	st	Z, r1
    1a84:	2e 96       	adiw	r28, 0x0e	; 14
    1a86:	e4 e0       	ldi	r30, 0x04	; 4
    1a88:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__epilogue_restores__+0x1c>

00001a8c <vfprintf>:
    1a8c:	ab e0       	ldi	r26, 0x0B	; 11
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	ec e4       	ldi	r30, 0x4C	; 76
    1a92:	fd e0       	ldi	r31, 0x0D	; 13
    1a94:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__prologue_saves__>
    1a98:	3c 01       	movw	r6, r24
    1a9a:	2b 01       	movw	r4, r22
    1a9c:	5a 01       	movw	r10, r20
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	17 82       	std	Z+7, r1	; 0x07
    1aa2:	16 82       	std	Z+6, r1	; 0x06
    1aa4:	83 81       	ldd	r24, Z+3	; 0x03
    1aa6:	81 fd       	sbrc	r24, 1
    1aa8:	03 c0       	rjmp	.+6      	; 0x1ab0 <vfprintf+0x24>
    1aaa:	6f ef       	ldi	r22, 0xFF	; 255
    1aac:	7f ef       	ldi	r23, 0xFF	; 255
    1aae:	c6 c1       	rjmp	.+908    	; 0x1e3c <vfprintf+0x3b0>
    1ab0:	9a e0       	ldi	r25, 0x0A	; 10
    1ab2:	89 2e       	mov	r8, r25
    1ab4:	1e 01       	movw	r2, r28
    1ab6:	08 94       	sec
    1ab8:	21 1c       	adc	r2, r1
    1aba:	31 1c       	adc	r3, r1
    1abc:	f3 01       	movw	r30, r6
    1abe:	23 81       	ldd	r18, Z+3	; 0x03
    1ac0:	f2 01       	movw	r30, r4
    1ac2:	23 fd       	sbrc	r18, 3
    1ac4:	85 91       	lpm	r24, Z+
    1ac6:	23 ff       	sbrs	r18, 3
    1ac8:	81 91       	ld	r24, Z+
    1aca:	2f 01       	movw	r4, r30
    1acc:	88 23       	and	r24, r24
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <vfprintf+0x46>
    1ad0:	b2 c1       	rjmp	.+868    	; 0x1e36 <vfprintf+0x3aa>
    1ad2:	85 32       	cpi	r24, 0x25	; 37
    1ad4:	39 f4       	brne	.+14     	; 0x1ae4 <vfprintf+0x58>
    1ad6:	23 fd       	sbrc	r18, 3
    1ad8:	85 91       	lpm	r24, Z+
    1ada:	23 ff       	sbrs	r18, 3
    1adc:	81 91       	ld	r24, Z+
    1ade:	2f 01       	movw	r4, r30
    1ae0:	85 32       	cpi	r24, 0x25	; 37
    1ae2:	29 f4       	brne	.+10     	; 0x1aee <vfprintf+0x62>
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	b3 01       	movw	r22, r6
    1ae8:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    1aec:	e7 cf       	rjmp	.-50     	; 0x1abc <vfprintf+0x30>
    1aee:	98 2f       	mov	r25, r24
    1af0:	ff 24       	eor	r15, r15
    1af2:	ee 24       	eor	r14, r14
    1af4:	99 24       	eor	r9, r9
    1af6:	ff e1       	ldi	r31, 0x1F	; 31
    1af8:	ff 15       	cp	r31, r15
    1afa:	d0 f0       	brcs	.+52     	; 0x1b30 <vfprintf+0xa4>
    1afc:	9b 32       	cpi	r25, 0x2B	; 43
    1afe:	69 f0       	breq	.+26     	; 0x1b1a <vfprintf+0x8e>
    1b00:	9c 32       	cpi	r25, 0x2C	; 44
    1b02:	28 f4       	brcc	.+10     	; 0x1b0e <vfprintf+0x82>
    1b04:	90 32       	cpi	r25, 0x20	; 32
    1b06:	59 f0       	breq	.+22     	; 0x1b1e <vfprintf+0x92>
    1b08:	93 32       	cpi	r25, 0x23	; 35
    1b0a:	91 f4       	brne	.+36     	; 0x1b30 <vfprintf+0xa4>
    1b0c:	0e c0       	rjmp	.+28     	; 0x1b2a <vfprintf+0x9e>
    1b0e:	9d 32       	cpi	r25, 0x2D	; 45
    1b10:	49 f0       	breq	.+18     	; 0x1b24 <vfprintf+0x98>
    1b12:	90 33       	cpi	r25, 0x30	; 48
    1b14:	69 f4       	brne	.+26     	; 0x1b30 <vfprintf+0xa4>
    1b16:	41 e0       	ldi	r20, 0x01	; 1
    1b18:	24 c0       	rjmp	.+72     	; 0x1b62 <vfprintf+0xd6>
    1b1a:	52 e0       	ldi	r21, 0x02	; 2
    1b1c:	f5 2a       	or	r15, r21
    1b1e:	84 e0       	ldi	r24, 0x04	; 4
    1b20:	f8 2a       	or	r15, r24
    1b22:	28 c0       	rjmp	.+80     	; 0x1b74 <vfprintf+0xe8>
    1b24:	98 e0       	ldi	r25, 0x08	; 8
    1b26:	f9 2a       	or	r15, r25
    1b28:	25 c0       	rjmp	.+74     	; 0x1b74 <vfprintf+0xe8>
    1b2a:	e0 e1       	ldi	r30, 0x10	; 16
    1b2c:	fe 2a       	or	r15, r30
    1b2e:	22 c0       	rjmp	.+68     	; 0x1b74 <vfprintf+0xe8>
    1b30:	f7 fc       	sbrc	r15, 7
    1b32:	29 c0       	rjmp	.+82     	; 0x1b86 <vfprintf+0xfa>
    1b34:	89 2f       	mov	r24, r25
    1b36:	80 53       	subi	r24, 0x30	; 48
    1b38:	8a 30       	cpi	r24, 0x0A	; 10
    1b3a:	70 f4       	brcc	.+28     	; 0x1b58 <vfprintf+0xcc>
    1b3c:	f6 fe       	sbrs	r15, 6
    1b3e:	05 c0       	rjmp	.+10     	; 0x1b4a <vfprintf+0xbe>
    1b40:	98 9c       	mul	r9, r8
    1b42:	90 2c       	mov	r9, r0
    1b44:	11 24       	eor	r1, r1
    1b46:	98 0e       	add	r9, r24
    1b48:	15 c0       	rjmp	.+42     	; 0x1b74 <vfprintf+0xe8>
    1b4a:	e8 9c       	mul	r14, r8
    1b4c:	e0 2c       	mov	r14, r0
    1b4e:	11 24       	eor	r1, r1
    1b50:	e8 0e       	add	r14, r24
    1b52:	f0 e2       	ldi	r31, 0x20	; 32
    1b54:	ff 2a       	or	r15, r31
    1b56:	0e c0       	rjmp	.+28     	; 0x1b74 <vfprintf+0xe8>
    1b58:	9e 32       	cpi	r25, 0x2E	; 46
    1b5a:	29 f4       	brne	.+10     	; 0x1b66 <vfprintf+0xda>
    1b5c:	f6 fc       	sbrc	r15, 6
    1b5e:	6b c1       	rjmp	.+726    	; 0x1e36 <vfprintf+0x3aa>
    1b60:	40 e4       	ldi	r20, 0x40	; 64
    1b62:	f4 2a       	or	r15, r20
    1b64:	07 c0       	rjmp	.+14     	; 0x1b74 <vfprintf+0xe8>
    1b66:	9c 36       	cpi	r25, 0x6C	; 108
    1b68:	19 f4       	brne	.+6      	; 0x1b70 <vfprintf+0xe4>
    1b6a:	50 e8       	ldi	r21, 0x80	; 128
    1b6c:	f5 2a       	or	r15, r21
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <vfprintf+0xe8>
    1b70:	98 36       	cpi	r25, 0x68	; 104
    1b72:	49 f4       	brne	.+18     	; 0x1b86 <vfprintf+0xfa>
    1b74:	f2 01       	movw	r30, r4
    1b76:	23 fd       	sbrc	r18, 3
    1b78:	95 91       	lpm	r25, Z+
    1b7a:	23 ff       	sbrs	r18, 3
    1b7c:	91 91       	ld	r25, Z+
    1b7e:	2f 01       	movw	r4, r30
    1b80:	99 23       	and	r25, r25
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <vfprintf+0xfa>
    1b84:	b8 cf       	rjmp	.-144    	; 0x1af6 <vfprintf+0x6a>
    1b86:	89 2f       	mov	r24, r25
    1b88:	85 54       	subi	r24, 0x45	; 69
    1b8a:	83 30       	cpi	r24, 0x03	; 3
    1b8c:	18 f0       	brcs	.+6      	; 0x1b94 <vfprintf+0x108>
    1b8e:	80 52       	subi	r24, 0x20	; 32
    1b90:	83 30       	cpi	r24, 0x03	; 3
    1b92:	38 f4       	brcc	.+14     	; 0x1ba2 <vfprintf+0x116>
    1b94:	44 e0       	ldi	r20, 0x04	; 4
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	a4 0e       	add	r10, r20
    1b9a:	b5 1e       	adc	r11, r21
    1b9c:	5f e3       	ldi	r21, 0x3F	; 63
    1b9e:	59 83       	std	Y+1, r21	; 0x01
    1ba0:	0f c0       	rjmp	.+30     	; 0x1bc0 <vfprintf+0x134>
    1ba2:	93 36       	cpi	r25, 0x63	; 99
    1ba4:	31 f0       	breq	.+12     	; 0x1bb2 <vfprintf+0x126>
    1ba6:	93 37       	cpi	r25, 0x73	; 115
    1ba8:	79 f0       	breq	.+30     	; 0x1bc8 <vfprintf+0x13c>
    1baa:	93 35       	cpi	r25, 0x53	; 83
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <vfprintf+0x124>
    1bae:	56 c0       	rjmp	.+172    	; 0x1c5c <vfprintf+0x1d0>
    1bb0:	20 c0       	rjmp	.+64     	; 0x1bf2 <vfprintf+0x166>
    1bb2:	f5 01       	movw	r30, r10
    1bb4:	80 81       	ld	r24, Z
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	42 e0       	ldi	r20, 0x02	; 2
    1bba:	50 e0       	ldi	r21, 0x00	; 0
    1bbc:	a4 0e       	add	r10, r20
    1bbe:	b5 1e       	adc	r11, r21
    1bc0:	61 01       	movw	r12, r2
    1bc2:	01 e0       	ldi	r16, 0x01	; 1
    1bc4:	10 e0       	ldi	r17, 0x00	; 0
    1bc6:	12 c0       	rjmp	.+36     	; 0x1bec <vfprintf+0x160>
    1bc8:	f5 01       	movw	r30, r10
    1bca:	c0 80       	ld	r12, Z
    1bcc:	d1 80       	ldd	r13, Z+1	; 0x01
    1bce:	f6 fc       	sbrc	r15, 6
    1bd0:	03 c0       	rjmp	.+6      	; 0x1bd8 <vfprintf+0x14c>
    1bd2:	6f ef       	ldi	r22, 0xFF	; 255
    1bd4:	7f ef       	ldi	r23, 0xFF	; 255
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <vfprintf+0x150>
    1bd8:	69 2d       	mov	r22, r9
    1bda:	70 e0       	ldi	r23, 0x00	; 0
    1bdc:	42 e0       	ldi	r20, 0x02	; 2
    1bde:	50 e0       	ldi	r21, 0x00	; 0
    1be0:	a4 0e       	add	r10, r20
    1be2:	b5 1e       	adc	r11, r21
    1be4:	c6 01       	movw	r24, r12
    1be6:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <strnlen>
    1bea:	8c 01       	movw	r16, r24
    1bec:	5f e7       	ldi	r21, 0x7F	; 127
    1bee:	f5 22       	and	r15, r21
    1bf0:	14 c0       	rjmp	.+40     	; 0x1c1a <vfprintf+0x18e>
    1bf2:	f5 01       	movw	r30, r10
    1bf4:	c0 80       	ld	r12, Z
    1bf6:	d1 80       	ldd	r13, Z+1	; 0x01
    1bf8:	f6 fc       	sbrc	r15, 6
    1bfa:	03 c0       	rjmp	.+6      	; 0x1c02 <vfprintf+0x176>
    1bfc:	6f ef       	ldi	r22, 0xFF	; 255
    1bfe:	7f ef       	ldi	r23, 0xFF	; 255
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <vfprintf+0x17a>
    1c02:	69 2d       	mov	r22, r9
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	42 e0       	ldi	r20, 0x02	; 2
    1c08:	50 e0       	ldi	r21, 0x00	; 0
    1c0a:	a4 0e       	add	r10, r20
    1c0c:	b5 1e       	adc	r11, r21
    1c0e:	c6 01       	movw	r24, r12
    1c10:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <strnlen_P>
    1c14:	8c 01       	movw	r16, r24
    1c16:	50 e8       	ldi	r21, 0x80	; 128
    1c18:	f5 2a       	or	r15, r21
    1c1a:	f3 fe       	sbrs	r15, 3
    1c1c:	07 c0       	rjmp	.+14     	; 0x1c2c <vfprintf+0x1a0>
    1c1e:	1a c0       	rjmp	.+52     	; 0x1c54 <vfprintf+0x1c8>
    1c20:	80 e2       	ldi	r24, 0x20	; 32
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	b3 01       	movw	r22, r6
    1c26:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    1c2a:	ea 94       	dec	r14
    1c2c:	8e 2d       	mov	r24, r14
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	08 17       	cp	r16, r24
    1c32:	19 07       	cpc	r17, r25
    1c34:	a8 f3       	brcs	.-22     	; 0x1c20 <vfprintf+0x194>
    1c36:	0e c0       	rjmp	.+28     	; 0x1c54 <vfprintf+0x1c8>
    1c38:	f6 01       	movw	r30, r12
    1c3a:	f7 fc       	sbrc	r15, 7
    1c3c:	85 91       	lpm	r24, Z+
    1c3e:	f7 fe       	sbrs	r15, 7
    1c40:	81 91       	ld	r24, Z+
    1c42:	6f 01       	movw	r12, r30
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	b3 01       	movw	r22, r6
    1c48:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    1c4c:	e1 10       	cpse	r14, r1
    1c4e:	ea 94       	dec	r14
    1c50:	01 50       	subi	r16, 0x01	; 1
    1c52:	10 40       	sbci	r17, 0x00	; 0
    1c54:	01 15       	cp	r16, r1
    1c56:	11 05       	cpc	r17, r1
    1c58:	79 f7       	brne	.-34     	; 0x1c38 <vfprintf+0x1ac>
    1c5a:	ea c0       	rjmp	.+468    	; 0x1e30 <vfprintf+0x3a4>
    1c5c:	94 36       	cpi	r25, 0x64	; 100
    1c5e:	11 f0       	breq	.+4      	; 0x1c64 <vfprintf+0x1d8>
    1c60:	99 36       	cpi	r25, 0x69	; 105
    1c62:	69 f5       	brne	.+90     	; 0x1cbe <vfprintf+0x232>
    1c64:	f7 fe       	sbrs	r15, 7
    1c66:	08 c0       	rjmp	.+16     	; 0x1c78 <vfprintf+0x1ec>
    1c68:	f5 01       	movw	r30, r10
    1c6a:	20 81       	ld	r18, Z
    1c6c:	31 81       	ldd	r19, Z+1	; 0x01
    1c6e:	42 81       	ldd	r20, Z+2	; 0x02
    1c70:	53 81       	ldd	r21, Z+3	; 0x03
    1c72:	84 e0       	ldi	r24, 0x04	; 4
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	0a c0       	rjmp	.+20     	; 0x1c8c <vfprintf+0x200>
    1c78:	f5 01       	movw	r30, r10
    1c7a:	80 81       	ld	r24, Z
    1c7c:	91 81       	ldd	r25, Z+1	; 0x01
    1c7e:	9c 01       	movw	r18, r24
    1c80:	44 27       	eor	r20, r20
    1c82:	37 fd       	sbrc	r19, 7
    1c84:	40 95       	com	r20
    1c86:	54 2f       	mov	r21, r20
    1c88:	82 e0       	ldi	r24, 0x02	; 2
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	a8 0e       	add	r10, r24
    1c8e:	b9 1e       	adc	r11, r25
    1c90:	9f e6       	ldi	r25, 0x6F	; 111
    1c92:	f9 22       	and	r15, r25
    1c94:	57 ff       	sbrs	r21, 7
    1c96:	09 c0       	rjmp	.+18     	; 0x1caa <vfprintf+0x21e>
    1c98:	50 95       	com	r21
    1c9a:	40 95       	com	r20
    1c9c:	30 95       	com	r19
    1c9e:	21 95       	neg	r18
    1ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ca4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca6:	e0 e8       	ldi	r30, 0x80	; 128
    1ca8:	fe 2a       	or	r15, r30
    1caa:	ca 01       	movw	r24, r20
    1cac:	b9 01       	movw	r22, r18
    1cae:	a1 01       	movw	r20, r2
    1cb0:	2a e0       	ldi	r18, 0x0A	; 10
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__ultoa_invert>
    1cb8:	d8 2e       	mov	r13, r24
    1cba:	d2 18       	sub	r13, r2
    1cbc:	40 c0       	rjmp	.+128    	; 0x1d3e <vfprintf+0x2b2>
    1cbe:	95 37       	cpi	r25, 0x75	; 117
    1cc0:	29 f4       	brne	.+10     	; 0x1ccc <vfprintf+0x240>
    1cc2:	1f 2d       	mov	r17, r15
    1cc4:	1f 7e       	andi	r17, 0xEF	; 239
    1cc6:	2a e0       	ldi	r18, 0x0A	; 10
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	1d c0       	rjmp	.+58     	; 0x1d06 <vfprintf+0x27a>
    1ccc:	1f 2d       	mov	r17, r15
    1cce:	19 7f       	andi	r17, 0xF9	; 249
    1cd0:	9f 36       	cpi	r25, 0x6F	; 111
    1cd2:	61 f0       	breq	.+24     	; 0x1cec <vfprintf+0x260>
    1cd4:	90 37       	cpi	r25, 0x70	; 112
    1cd6:	20 f4       	brcc	.+8      	; 0x1ce0 <vfprintf+0x254>
    1cd8:	98 35       	cpi	r25, 0x58	; 88
    1cda:	09 f0       	breq	.+2      	; 0x1cde <vfprintf+0x252>
    1cdc:	ac c0       	rjmp	.+344    	; 0x1e36 <vfprintf+0x3aa>
    1cde:	0f c0       	rjmp	.+30     	; 0x1cfe <vfprintf+0x272>
    1ce0:	90 37       	cpi	r25, 0x70	; 112
    1ce2:	39 f0       	breq	.+14     	; 0x1cf2 <vfprintf+0x266>
    1ce4:	98 37       	cpi	r25, 0x78	; 120
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <vfprintf+0x25e>
    1ce8:	a6 c0       	rjmp	.+332    	; 0x1e36 <vfprintf+0x3aa>
    1cea:	04 c0       	rjmp	.+8      	; 0x1cf4 <vfprintf+0x268>
    1cec:	28 e0       	ldi	r18, 0x08	; 8
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	0a c0       	rjmp	.+20     	; 0x1d06 <vfprintf+0x27a>
    1cf2:	10 61       	ori	r17, 0x10	; 16
    1cf4:	14 fd       	sbrc	r17, 4
    1cf6:	14 60       	ori	r17, 0x04	; 4
    1cf8:	20 e1       	ldi	r18, 0x10	; 16
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	04 c0       	rjmp	.+8      	; 0x1d06 <vfprintf+0x27a>
    1cfe:	14 fd       	sbrc	r17, 4
    1d00:	16 60       	ori	r17, 0x06	; 6
    1d02:	20 e1       	ldi	r18, 0x10	; 16
    1d04:	32 e0       	ldi	r19, 0x02	; 2
    1d06:	17 ff       	sbrs	r17, 7
    1d08:	08 c0       	rjmp	.+16     	; 0x1d1a <vfprintf+0x28e>
    1d0a:	f5 01       	movw	r30, r10
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	44 e0       	ldi	r20, 0x04	; 4
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	08 c0       	rjmp	.+16     	; 0x1d2a <vfprintf+0x29e>
    1d1a:	f5 01       	movw	r30, r10
    1d1c:	80 81       	ld	r24, Z
    1d1e:	91 81       	ldd	r25, Z+1	; 0x01
    1d20:	bc 01       	movw	r22, r24
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	42 e0       	ldi	r20, 0x02	; 2
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	a4 0e       	add	r10, r20
    1d2c:	b5 1e       	adc	r11, r21
    1d2e:	a1 01       	movw	r20, r2
    1d30:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__ultoa_invert>
    1d34:	d8 2e       	mov	r13, r24
    1d36:	d2 18       	sub	r13, r2
    1d38:	8f e7       	ldi	r24, 0x7F	; 127
    1d3a:	f8 2e       	mov	r15, r24
    1d3c:	f1 22       	and	r15, r17
    1d3e:	f6 fe       	sbrs	r15, 6
    1d40:	0b c0       	rjmp	.+22     	; 0x1d58 <vfprintf+0x2cc>
    1d42:	5e ef       	ldi	r21, 0xFE	; 254
    1d44:	f5 22       	and	r15, r21
    1d46:	d9 14       	cp	r13, r9
    1d48:	38 f4       	brcc	.+14     	; 0x1d58 <vfprintf+0x2cc>
    1d4a:	f4 fe       	sbrs	r15, 4
    1d4c:	07 c0       	rjmp	.+14     	; 0x1d5c <vfprintf+0x2d0>
    1d4e:	f2 fc       	sbrc	r15, 2
    1d50:	05 c0       	rjmp	.+10     	; 0x1d5c <vfprintf+0x2d0>
    1d52:	8f ee       	ldi	r24, 0xEF	; 239
    1d54:	f8 22       	and	r15, r24
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <vfprintf+0x2d0>
    1d58:	1d 2d       	mov	r17, r13
    1d5a:	01 c0       	rjmp	.+2      	; 0x1d5e <vfprintf+0x2d2>
    1d5c:	19 2d       	mov	r17, r9
    1d5e:	f4 fe       	sbrs	r15, 4
    1d60:	0d c0       	rjmp	.+26     	; 0x1d7c <vfprintf+0x2f0>
    1d62:	fe 01       	movw	r30, r28
    1d64:	ed 0d       	add	r30, r13
    1d66:	f1 1d       	adc	r31, r1
    1d68:	80 81       	ld	r24, Z
    1d6a:	80 33       	cpi	r24, 0x30	; 48
    1d6c:	19 f4       	brne	.+6      	; 0x1d74 <vfprintf+0x2e8>
    1d6e:	99 ee       	ldi	r25, 0xE9	; 233
    1d70:	f9 22       	and	r15, r25
    1d72:	08 c0       	rjmp	.+16     	; 0x1d84 <vfprintf+0x2f8>
    1d74:	1f 5f       	subi	r17, 0xFF	; 255
    1d76:	f2 fe       	sbrs	r15, 2
    1d78:	05 c0       	rjmp	.+10     	; 0x1d84 <vfprintf+0x2f8>
    1d7a:	03 c0       	rjmp	.+6      	; 0x1d82 <vfprintf+0x2f6>
    1d7c:	8f 2d       	mov	r24, r15
    1d7e:	86 78       	andi	r24, 0x86	; 134
    1d80:	09 f0       	breq	.+2      	; 0x1d84 <vfprintf+0x2f8>
    1d82:	1f 5f       	subi	r17, 0xFF	; 255
    1d84:	0f 2d       	mov	r16, r15
    1d86:	f3 fc       	sbrc	r15, 3
    1d88:	14 c0       	rjmp	.+40     	; 0x1db2 <vfprintf+0x326>
    1d8a:	f0 fe       	sbrs	r15, 0
    1d8c:	0f c0       	rjmp	.+30     	; 0x1dac <vfprintf+0x320>
    1d8e:	1e 15       	cp	r17, r14
    1d90:	10 f0       	brcs	.+4      	; 0x1d96 <vfprintf+0x30a>
    1d92:	9d 2c       	mov	r9, r13
    1d94:	0b c0       	rjmp	.+22     	; 0x1dac <vfprintf+0x320>
    1d96:	9d 2c       	mov	r9, r13
    1d98:	9e 0c       	add	r9, r14
    1d9a:	91 1a       	sub	r9, r17
    1d9c:	1e 2d       	mov	r17, r14
    1d9e:	06 c0       	rjmp	.+12     	; 0x1dac <vfprintf+0x320>
    1da0:	80 e2       	ldi	r24, 0x20	; 32
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	b3 01       	movw	r22, r6
    1da6:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    1daa:	1f 5f       	subi	r17, 0xFF	; 255
    1dac:	1e 15       	cp	r17, r14
    1dae:	c0 f3       	brcs	.-16     	; 0x1da0 <vfprintf+0x314>
    1db0:	04 c0       	rjmp	.+8      	; 0x1dba <vfprintf+0x32e>
    1db2:	1e 15       	cp	r17, r14
    1db4:	10 f4       	brcc	.+4      	; 0x1dba <vfprintf+0x32e>
    1db6:	e1 1a       	sub	r14, r17
    1db8:	01 c0       	rjmp	.+2      	; 0x1dbc <vfprintf+0x330>
    1dba:	ee 24       	eor	r14, r14
    1dbc:	04 ff       	sbrs	r16, 4
    1dbe:	0f c0       	rjmp	.+30     	; 0x1dde <vfprintf+0x352>
    1dc0:	80 e3       	ldi	r24, 0x30	; 48
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	b3 01       	movw	r22, r6
    1dc6:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    1dca:	02 ff       	sbrs	r16, 2
    1dcc:	1d c0       	rjmp	.+58     	; 0x1e08 <vfprintf+0x37c>
    1dce:	01 fd       	sbrc	r16, 1
    1dd0:	03 c0       	rjmp	.+6      	; 0x1dd8 <vfprintf+0x34c>
    1dd2:	88 e7       	ldi	r24, 0x78	; 120
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	0e c0       	rjmp	.+28     	; 0x1df4 <vfprintf+0x368>
    1dd8:	88 e5       	ldi	r24, 0x58	; 88
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	0b c0       	rjmp	.+22     	; 0x1df4 <vfprintf+0x368>
    1dde:	80 2f       	mov	r24, r16
    1de0:	86 78       	andi	r24, 0x86	; 134
    1de2:	91 f0       	breq	.+36     	; 0x1e08 <vfprintf+0x37c>
    1de4:	01 ff       	sbrs	r16, 1
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <vfprintf+0x360>
    1de8:	8b e2       	ldi	r24, 0x2B	; 43
    1dea:	01 c0       	rjmp	.+2      	; 0x1dee <vfprintf+0x362>
    1dec:	80 e2       	ldi	r24, 0x20	; 32
    1dee:	f7 fc       	sbrc	r15, 7
    1df0:	8d e2       	ldi	r24, 0x2D	; 45
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	b3 01       	movw	r22, r6
    1df6:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    1dfa:	06 c0       	rjmp	.+12     	; 0x1e08 <vfprintf+0x37c>
    1dfc:	80 e3       	ldi	r24, 0x30	; 48
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	b3 01       	movw	r22, r6
    1e02:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    1e06:	9a 94       	dec	r9
    1e08:	d9 14       	cp	r13, r9
    1e0a:	c0 f3       	brcs	.-16     	; 0x1dfc <vfprintf+0x370>
    1e0c:	da 94       	dec	r13
    1e0e:	f1 01       	movw	r30, r2
    1e10:	ed 0d       	add	r30, r13
    1e12:	f1 1d       	adc	r31, r1
    1e14:	80 81       	ld	r24, Z
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	b3 01       	movw	r22, r6
    1e1a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    1e1e:	dd 20       	and	r13, r13
    1e20:	a9 f7       	brne	.-22     	; 0x1e0c <vfprintf+0x380>
    1e22:	06 c0       	rjmp	.+12     	; 0x1e30 <vfprintf+0x3a4>
    1e24:	80 e2       	ldi	r24, 0x20	; 32
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	b3 01       	movw	r22, r6
    1e2a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <fputc>
    1e2e:	ea 94       	dec	r14
    1e30:	ee 20       	and	r14, r14
    1e32:	c1 f7       	brne	.-16     	; 0x1e24 <vfprintf+0x398>
    1e34:	43 ce       	rjmp	.-890    	; 0x1abc <vfprintf+0x30>
    1e36:	f3 01       	movw	r30, r6
    1e38:	66 81       	ldd	r22, Z+6	; 0x06
    1e3a:	77 81       	ldd	r23, Z+7	; 0x07
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	2b 96       	adiw	r28, 0x0b	; 11
    1e40:	e2 e1       	ldi	r30, 0x12	; 18
    1e42:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__epilogue_restores__>

00001e46 <strnlen_P>:
    1e46:	fc 01       	movw	r30, r24
    1e48:	05 90       	lpm	r0, Z+
    1e4a:	61 50       	subi	r22, 0x01	; 1
    1e4c:	70 40       	sbci	r23, 0x00	; 0
    1e4e:	01 10       	cpse	r0, r1
    1e50:	d8 f7       	brcc	.-10     	; 0x1e48 <strnlen_P+0x2>
    1e52:	80 95       	com	r24
    1e54:	90 95       	com	r25
    1e56:	8e 0f       	add	r24, r30
    1e58:	9f 1f       	adc	r25, r31
    1e5a:	08 95       	ret

00001e5c <strnlen>:
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	61 50       	subi	r22, 0x01	; 1
    1e60:	70 40       	sbci	r23, 0x00	; 0
    1e62:	01 90       	ld	r0, Z+
    1e64:	01 10       	cpse	r0, r1
    1e66:	d8 f7       	brcc	.-10     	; 0x1e5e <strnlen+0x2>
    1e68:	80 95       	com	r24
    1e6a:	90 95       	com	r25
    1e6c:	8e 0f       	add	r24, r30
    1e6e:	9f 1f       	adc	r25, r31
    1e70:	08 95       	ret

00001e72 <fputc>:
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	8c 01       	movw	r16, r24
    1e7c:	eb 01       	movw	r28, r22
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	81 ff       	sbrs	r24, 1
    1e82:	1b c0       	rjmp	.+54     	; 0x1eba <fputc+0x48>
    1e84:	82 ff       	sbrs	r24, 2
    1e86:	0d c0       	rjmp	.+26     	; 0x1ea2 <fputc+0x30>
    1e88:	2e 81       	ldd	r18, Y+6	; 0x06
    1e8a:	3f 81       	ldd	r19, Y+7	; 0x07
    1e8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e90:	28 17       	cp	r18, r24
    1e92:	39 07       	cpc	r19, r25
    1e94:	64 f4       	brge	.+24     	; 0x1eae <fputc+0x3c>
    1e96:	e8 81       	ld	r30, Y
    1e98:	f9 81       	ldd	r31, Y+1	; 0x01
    1e9a:	01 93       	st	Z+, r16
    1e9c:	f9 83       	std	Y+1, r31	; 0x01
    1e9e:	e8 83       	st	Y, r30
    1ea0:	06 c0       	rjmp	.+12     	; 0x1eae <fputc+0x3c>
    1ea2:	e8 85       	ldd	r30, Y+8	; 0x08
    1ea4:	f9 85       	ldd	r31, Y+9	; 0x09
    1ea6:	80 2f       	mov	r24, r16
    1ea8:	09 95       	icall
    1eaa:	89 2b       	or	r24, r25
    1eac:	31 f4       	brne	.+12     	; 0x1eba <fputc+0x48>
    1eae:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb0:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb2:	01 96       	adiw	r24, 0x01	; 1
    1eb4:	9f 83       	std	Y+7, r25	; 0x07
    1eb6:	8e 83       	std	Y+6, r24	; 0x06
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <fputc+0x4c>
    1eba:	0f ef       	ldi	r16, 0xFF	; 255
    1ebc:	1f ef       	ldi	r17, 0xFF	; 255
    1ebe:	c8 01       	movw	r24, r16
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	08 95       	ret

00001eca <__ultoa_invert>:
    1eca:	fa 01       	movw	r30, r20
    1ecc:	aa 27       	eor	r26, r26
    1ece:	28 30       	cpi	r18, 0x08	; 8
    1ed0:	51 f1       	breq	.+84     	; 0x1f26 <__ultoa_invert+0x5c>
    1ed2:	20 31       	cpi	r18, 0x10	; 16
    1ed4:	81 f1       	breq	.+96     	; 0x1f36 <__ultoa_invert+0x6c>
    1ed6:	e8 94       	clt
    1ed8:	6f 93       	push	r22
    1eda:	6e 7f       	andi	r22, 0xFE	; 254
    1edc:	6e 5f       	subi	r22, 0xFE	; 254
    1ede:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee4:	af 4f       	sbci	r26, 0xFF	; 255
    1ee6:	b1 e0       	ldi	r27, 0x01	; 1
    1ee8:	3e d0       	rcall	.+124    	; 0x1f66 <__ultoa_invert+0x9c>
    1eea:	b4 e0       	ldi	r27, 0x04	; 4
    1eec:	3c d0       	rcall	.+120    	; 0x1f66 <__ultoa_invert+0x9c>
    1eee:	67 0f       	add	r22, r23
    1ef0:	78 1f       	adc	r23, r24
    1ef2:	89 1f       	adc	r24, r25
    1ef4:	9a 1f       	adc	r25, r26
    1ef6:	a1 1d       	adc	r26, r1
    1ef8:	68 0f       	add	r22, r24
    1efa:	79 1f       	adc	r23, r25
    1efc:	8a 1f       	adc	r24, r26
    1efe:	91 1d       	adc	r25, r1
    1f00:	a1 1d       	adc	r26, r1
    1f02:	6a 0f       	add	r22, r26
    1f04:	71 1d       	adc	r23, r1
    1f06:	81 1d       	adc	r24, r1
    1f08:	91 1d       	adc	r25, r1
    1f0a:	a1 1d       	adc	r26, r1
    1f0c:	20 d0       	rcall	.+64     	; 0x1f4e <__ultoa_invert+0x84>
    1f0e:	09 f4       	brne	.+2      	; 0x1f12 <__ultoa_invert+0x48>
    1f10:	68 94       	set
    1f12:	3f 91       	pop	r19
    1f14:	2a e0       	ldi	r18, 0x0A	; 10
    1f16:	26 9f       	mul	r18, r22
    1f18:	11 24       	eor	r1, r1
    1f1a:	30 19       	sub	r19, r0
    1f1c:	30 5d       	subi	r19, 0xD0	; 208
    1f1e:	31 93       	st	Z+, r19
    1f20:	de f6       	brtc	.-74     	; 0x1ed8 <__ultoa_invert+0xe>
    1f22:	cf 01       	movw	r24, r30
    1f24:	08 95       	ret
    1f26:	46 2f       	mov	r20, r22
    1f28:	47 70       	andi	r20, 0x07	; 7
    1f2a:	40 5d       	subi	r20, 0xD0	; 208
    1f2c:	41 93       	st	Z+, r20
    1f2e:	b3 e0       	ldi	r27, 0x03	; 3
    1f30:	0f d0       	rcall	.+30     	; 0x1f50 <__ultoa_invert+0x86>
    1f32:	c9 f7       	brne	.-14     	; 0x1f26 <__ultoa_invert+0x5c>
    1f34:	f6 cf       	rjmp	.-20     	; 0x1f22 <__ultoa_invert+0x58>
    1f36:	46 2f       	mov	r20, r22
    1f38:	4f 70       	andi	r20, 0x0F	; 15
    1f3a:	40 5d       	subi	r20, 0xD0	; 208
    1f3c:	4a 33       	cpi	r20, 0x3A	; 58
    1f3e:	18 f0       	brcs	.+6      	; 0x1f46 <__ultoa_invert+0x7c>
    1f40:	49 5d       	subi	r20, 0xD9	; 217
    1f42:	31 fd       	sbrc	r19, 1
    1f44:	40 52       	subi	r20, 0x20	; 32
    1f46:	41 93       	st	Z+, r20
    1f48:	02 d0       	rcall	.+4      	; 0x1f4e <__ultoa_invert+0x84>
    1f4a:	a9 f7       	brne	.-22     	; 0x1f36 <__ultoa_invert+0x6c>
    1f4c:	ea cf       	rjmp	.-44     	; 0x1f22 <__ultoa_invert+0x58>
    1f4e:	b4 e0       	ldi	r27, 0x04	; 4
    1f50:	a6 95       	lsr	r26
    1f52:	97 95       	ror	r25
    1f54:	87 95       	ror	r24
    1f56:	77 95       	ror	r23
    1f58:	67 95       	ror	r22
    1f5a:	ba 95       	dec	r27
    1f5c:	c9 f7       	brne	.-14     	; 0x1f50 <__ultoa_invert+0x86>
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	61 05       	cpc	r22, r1
    1f62:	71 05       	cpc	r23, r1
    1f64:	08 95       	ret
    1f66:	9b 01       	movw	r18, r22
    1f68:	ac 01       	movw	r20, r24
    1f6a:	0a 2e       	mov	r0, r26
    1f6c:	06 94       	lsr	r0
    1f6e:	57 95       	ror	r21
    1f70:	47 95       	ror	r20
    1f72:	37 95       	ror	r19
    1f74:	27 95       	ror	r18
    1f76:	ba 95       	dec	r27
    1f78:	c9 f7       	brne	.-14     	; 0x1f6c <__ultoa_invert+0xa2>
    1f7a:	62 0f       	add	r22, r18
    1f7c:	73 1f       	adc	r23, r19
    1f7e:	84 1f       	adc	r24, r20
    1f80:	95 1f       	adc	r25, r21
    1f82:	a0 1d       	adc	r26, r0
    1f84:	08 95       	ret

00001f86 <_exit>:
    1f86:	f8 94       	cli

00001f88 <__stop_program>:
    1f88:	ff cf       	rjmp	.-2      	; 0x1f88 <__stop_program>
